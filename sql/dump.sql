-- --------------------------------------------------------
-- Host:                         localhost
-- Server version:               5.6.24-0ubuntu2 - (Ubuntu)
-- Server OS:                    debian-linux-gnu
-- HeidiSQL Version:             9.2.0.4947
-- --------------------------------------------------------

/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;
/*!40014 SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0 */;
/*!40101 SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='NO_AUTO_VALUE_ON_ZERO' */;

-- Dumping structure for table quiz.interview
DROP TABLE IF EXISTS `interview`;
CREATE TABLE IF NOT EXISTS `interview` (
  `id` bigint(20) NOT NULL AUTO_INCREMENT,
  `question` text,
  `answer` text,
  `position` bigint(20) DEFAULT NULL,
  `important` int(11) DEFAULT NULL,
  `topics_old` varchar(150) DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=79 DEFAULT CHARSET=latin1;

-- Dumping data for table quiz.interview: ~78 rows (approximately)
DELETE FROM `interview`;
/*!40000 ALTER TABLE `interview` DISABLE KEYS */;
INSERT INTO `interview` (`id`, `question`, `answer`, `position`, `important`, `topics_old`) VALUES
  (1, 'What is PHP?', 'PHP is an open source server side scripting language used to develop dynamic websites. PHP  stands for Hypertext Preprocessor, also stood for  Personal Home Page. Now the implementations of PHP is produced by The PHP group. It was created by Rasmus Lerdorf in 1995. It is a free software released under the PHP license.', 1, 0, NULL),
  (2, 'Who is the father of PHP?', 'Rasmus Lerdorf known as the father of PHP. Php was created by Rasmus Lerdorf In 1995', 2, 0, NULL),
  (3, 'Which is the latest version of PHP?', 'The latest stable version of PHP is 5.5.14 released at 27 June 2014', 3, 0, NULL),
  (4, 'What is the difference between session and cookies?', 'There are some difference between session and cookies thath are as following:\r\n\r\n			<ol>\r\n				<li>Session are temporary and Cookies are parmanent</li>\r\n				<li>Session data is store on server while Cookies are store on user\'s computer</li>\r\n				<li>Cookies contents can be easily modify but to modify Session contents is very hard</li>\r\n				<li>Cookies could be save for future reference but Session couldn\'t when user close the browser Session data also lost</li>\r\n			</ol>', 3, 1, NULL),
  (5, 'What is the current version of Apache?', 'The latest stable version of  Apache is 2.4.9, released  on 17th  March 2014.', 5, 0, NULL),
  (6, 'What is difference between unset and unlink?', 'Unset is used to delete(destroy) a variable whereas unlink used to delete a file.', 4, 0, NULL),
  (7, 'How we declare cookies and how we expire it?', '<p><strong>setcookie()</strong> function is used to set cookies in php.</p>\r\n<p>To declare Cookies syntax will be:</p>\r\n<i>setcookie(name, value, expire, path, domain);</i>\r\n<p>name    : Name of the cookie</p>\r\n<p>value     : Value of the cookie</p>\r\n<p>expire   : The time for cookie to expire</p>\r\n<p>path      : path to save the cookie where we want to save the cookie information</p>\r\n<p>domain  : domain name on which we want to save the cookie</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>e.g:</strong> <i>setcookie("username","harry",time()+60*60*60*24);</i></p>\r\n<p>In the above example the cookie name is username having value harry and set for one day.</p>\r\n<p>To expire cookies we have set the time of cookie in past</p>\r\n<p>To expire Cookies syntax will be: setcookie(name,value,time-3600);</p>', 4, 0, NULL),
  (8, 'What is the difference between array_merge and array_combine?', '<p><strong>array_merge</strong> merges the elements of one or more than one array such that the value of one array appended at the end of first array. If the arrays have same strings  key  then the later value overrides the previous value for that key.</p>\r\n<pre>\r\n<?php\r\n$array1 = array("course1" => "java","course2" => "sql");\r\n$array2 = array(("course1" => "php","course3" => "html");\r\n$result = array_merge($array1, $array2);\r\nprint_r($result);\r\n?>\r\nOUTPUT :  \r\narray\r\n(\r\n[course1] => php\r\n[course2] => sql\r\n[course3] => html\r\n)\r\n</pre>\r\n\r\n<p>Array_combine creates a new array by using the key of one array as keys and using the value of other array as values.</p>\r\n\r\n<pre>\r\n<?php\r\n$array1    = array("course1","course2");\r\n$array2    = array(("php","html");\r\n$new_array = array_combine($array1, $array2);\r\nprint_r($new_array);\r\n?>\r\nOUTPUT :\r\narray\r\n(\r\n[course1]  => php\r\n[course2]    => html\r\n)\r\n</pre>', 8, 0, NULL),
  (9, 'What is use of var_dump?', 'var_dump() function is used to display structured information(type and value) about one or more variable.\r\nsyntax:- var_dump(variable1,variable2,.....variablen);\r\ne.g   \r\n<pre><?php\r\n          $a=3.1;\r\n          $b=true;\r\n          var_dump($a,$b);\r\n         ?>\r\noutput   :  float(3.1)\r\n              bool(true)\r\n</pre>', 9, 0, NULL),
  (10, 'What is str_replace()?', '<p>This function replace some characters with some other characters in a string , this function is case sensitive.</p>\r\n<p>syntax:- str_replace(find,replace,string);</p>\r\n<p>&nbsp;</p>\r\n<p>find:-required,specifies the value to find.</p>\r\n<p>replace:-required,specifies the value to replace the value in find.</p>\r\n<p>string:-required,specifies the string to searched.</p>\r\n<p>&nbsp;</p>\r\n<p>for examlpe:</p>\r\n<pre>\r\n<?php\r\necho str_replace("world","india","hello world");\r\n?>\r\n</pre>\r\n<p>output: -  hello india</p>', 10, 0, NULL),
  (11, 'What are the differences between require and include, include_once and require_once?', '<p>The <strong>include()</strong> statement includes and evaluates the specified <span class="skimlinks-unlinked">file.The</span> documentation below also applies to <strong>require()</strong>. The two constructs are identical in every way except how they handle<br>\r\nfailure. <strong>include()</strong> produces a Warning while <strong>require()</strong> results in a Fatal Error. In other words, use<br>\r\n<strong>require()</strong> if you want a missing file to halt processing of the page.  <strong>include()</strong> does not behave this way, the script will continue regardless. The <strong>include_once() </strong>statement includes and evaluates the<br>\r\nspecified file during the execution of the script. This is a behavior similar to the <strong>include() </strong>statement, with the only difference being that if the code from a file has already been included, it will not be<br>\r\nincluded again. As the name suggests, it will be included just once.<strong>include_once() </strong>should be used in cases where the same file might be included and evaluated more than once during a particular execution of a script, and you want to be sure that it is included exactly once to avoid problems with function redefinitions, variable value reassignments, etc. <strong>require_once() </strong>should be used in cases where the same file might be included and evaluated more than once during a particular execution of a script, and you want to be sure that it is included exactly once to avoid problems with function<br>\r\nredefinitions, variable value reassignments, etc.</p>', 11, 0, NULL),
  (12, 'What is final class?', '<p>final class is a class that can not be inherited.Its protect the methods of class to be overriden by the child classes.</p>\r\n<strong>e.g.</strong>\r\n<pre>final class baseclass\r\n            {\r\n                public function mymethod()  {\r\n                          echo  "baseclass method";\r\n                            }\r\n\r\n            }\r\n\r\n            class derivedclass extends baseclass\r\n             {\r\n                        public function mymethod() {\r\n                                 echo   "derivedclass method";\r\n\r\n                              }\r\n\r\n               }\r\n\r\n          $c= new derivedclass();\r\n          $c->mymethod();\r\n</pre>\r\n<p>In the above example base class is declared as final and hence can not be inherited. Derived class tries to extends baseclass then compile error will be generated</p>', 12, 0, NULL),
  (13, 'What is difference between abstract class and interface classes?', '<strong>Interface:</strong> An interface does not contain any code,it contain only declaration of    methods,properties,events. Interfaces allow us to code which specifies which methods a class must have implement . Interfaces defines with the word interface . All methods in interfaces must be public\r\n           <strong>e.g :</strong><pre>interface myItem\r\n                    {\r\n\r\n                        void Id();\r\n                       string description();\r\n                        string Runtest(int testnumber);\r\n\r\n                    }\r\n</pre>\r\n\r\n<p><strong>Abstract class :</strong> Abstract classes are look like interfaces. Abstract classes may contain code although it may also have abstract method that do not have code. Abstract classes defines only signature of the method ,not implementation.  \r\nThe child class which inherit the abstarct class must define all the abstarct methods of its parent class .</p>\r\n\r\n         <strong>e.g :</strong><pre>abstract class myItem\r\n                    {\r\n\r\n                        abstract protected function getitem();\r\n                        abstract protected function setitem();\r\n\r\n                    }</pre>', 13, 1, NULL),
  (14, 'What is difference between echo() and print()?', '<p><strong>echo()</strong> and <strong>print()</strong> function both are used to show the output on the visitors screen but in echo we can take  one or more parameters.</p>\r\n\r\n<p><strong>print()</strong> has a return value of true or false whereas echo has a void return type.</p>\r\n\r\n <p><strong>echo()</strong> is slightly faster than print.</p>', 14, 0, NULL),
  (15, 'What is the difference between PHP4 and PHP5?', 'There are some difference between PHP4 and PHP5 that are as following:\r\n<ol>\r\n      <li>In PHP5 abstract classes are used but not used in PHP4</li>\r\n      <li>In PHP5 interfaces are used but not used in PHP4</li>\r\n      <li>In PHP5 visibility are used but not used in PHP4</li>\r\n      <li>In PHP5 magic methods are used but not uesd in PHP4</li>\r\n      <li>In PHP5 typehinting are used but not used in PHP4</li>\r\n      <li>In PHP5 cloning are used but not used in PHP4</li>\r\n      <li>In PHP5 construtor are written as __construct keyword but in PHP4 are written as class name </li>\r\n</ol>', 15, 0, NULL),
  (16, 'Why do we use ob_start()?', '<strong>Ob_start used</strong> to active the output buffering.When output buffering is on all output of the page sent at one time to the browser ,otherwise sometimes we face headers already sent type errors.', 16, 0, NULL),
  (17, 'What is a .htacces file?', '<p>.htaccess is a configuration file running on Apache server.These .htaccess file used to change the functionality and features of apache web server.</p>\r\n<p><strong> e.g</strong>   .htaccess file used for url rewrite .</p>\r\n<p>.htaccess file used to make the site password protected.</p>\r\n<p>.htaccess file can restrict  some ip addresses, so that on restricted ip adresses  site will not open.</p>', 17, 0, NULL),
  (18, 'Is PHP an interpreted language or compiler language?', 'PHP is an interpreted language.', 18, 0, NULL),
  (19, 'What is the difference between compiler language and interpreted language?', '<p><strong>Interpreted language</strong> executes line by line  , if there is some error on a line it stops the execution of script.</p>\r\n\r\n<p><strong>Compiler language</strong> can execute the whole script at a time and gives all the errors at a time. It does not stops the execution of script ,if there is some error on some line.</p>', 19, 0, NULL),
  (20, 'What are web services in PHP?', 'Web services converts our applicaton into a web-application, which can publish its functions and messages to the internet users. The main web services platform is XML and HTTP. Web services can be published, found and used through web', 20, 0, NULL),
  (21, 'What is static methods and properties in PHP?', 'A <strong>static</strong> method is accessible without needing instantiation of  a class. It means there is no need to make an  object to call the static methods .Static  methods and properties can be directly call from its class name with (::)  a scope resolution operator. They cannot be call from the object of its class. We need static methods to overcome   long overhead of instantiation of classes .\r\n<strong>e.g:</strong>\r\n<pre>\r\n<?php\r\nClass foo\r\n{\r\n      public static  $variable_name = \'it is a static variable\';\r\n} \r\n\r\necho foo :: $variable_name;      // Output:  it is a static varaible\r\n\r\n?>\r\n</pre>', 21, 0, NULL),
  (22, 'What are magic methods in PHP?', '<p><strong>Magic methods</strong> are very easy to identify, that every magical method name is started with double underscore( __)sign. We can not declare any user-defined functions with __ sign.<br>\r\n<br>\r\nSome magic methods are <strong>:</strong></p>\r\n<p><br>\r\n__construct() , __destruct()&nbsp; ,&nbsp;&nbsp;&nbsp; __call()&nbsp;&nbsp; ,&nbsp; __callStatic()&nbsp; ,&nbsp; __get(),&nbsp; __set()&nbsp;&nbsp;&nbsp;&nbsp; , __isset()&nbsp;&nbsp;&nbsp;&nbsp; ,__unset()</p>\r\n<p>,&nbsp; __sleep()&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ,&nbsp; __wakeup(),&nbsp;&nbsp; __toString()&nbsp; , __invoke()&nbsp;&nbsp;&nbsp; , __set_state() ,&nbsp; __clone().</p>', 22, 0, NULL),
  (23, 'What is the difference between GET and POST methods?', '<p><strong>GET Method:</strong></p>\r\n<ol>\r\n<li>All the name value pairs are submitted as a query string in URL</li>\r\n<li>It\'s not secured</li>\r\n<li>Length of the string is restricted about 256</li>\r\n<li>If method is not mentioned in the Form tag, this is the default method used</li>\r\n<li>Data is always submitted in the form of text</li>\r\n<li>It has some limit like only 2Kb data able to send for request</li>\r\n</ol>\r\n<p>GET requests a representation of the specified resource. Note that GET should not be used for operations that cause side-effects, such as using it for taking actions in web applications. One reason for this is that GET may be used arbitrarily by robots or crawlers, which should not need to consider the side effects that a request should cause.</p>\r\n \r\n<p><strong>POST Method:</strong></p>\r\n<ol>\r\n<li>All the name value pairs are submitted in the Message Body of the request.</li>\r\n<li>Length of the string (amount of data submitted) is not restricted.</li>\r\n<li>Post Method is secured because Name-Value pairs cannot be seen in location bar of the web browser.</li>\r\n<li> If post method is used and if the page is refreshed it would prompt before the request is resubmitted.</li>\r\n<li>If the service associated with the processing of a form has side effects (for example, modification of a database or subscription to a service), the method should be POST.</li>\r\n<lI>Unlimited data can we send</li>\r\n</ol>\r\n\r\n<p>POST submits data to be processed (e.g., from an HTML form) to the identified resource. The data is included in the body of the request. This may result in the creation of a new resource or the updates of existing resources or both.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>So essentially GET is used to retrieve remote data, and POST is used to insert/update remote data.</strong></p>\r\n\r\n<p>Another answer for about the main difference is: <strong>GET</strong> when you want to retrieve data (GET DATA). <strong>POST</strong> when you want to send data (POST DATA).</p>\r\n\r\n<p>Use GET for safe actions and POST for unsafe actions.</p>', 23, 1, NULL),
  (24, 'What are access control modifiers in php?', 'Keywords <strong>public, protected and private</strong> are the three types of access control modifiers in php. With the help of these keywords we can manage the accessing  of a method or property of a class  in php.', 24, 0, NULL),
  (25, 'What is difference between public, private and protected in php?', '<p><strong>Public:</strong></p>\r\n<p>The items which are declared public can be access from everywhere ie access from inside the class ,access in inherited class and   access from outside the class.</p>\r\n<p>&nbsp;</p>\r\n<p><strong>Protected:</strong></p>\r\n<p>The items which are declared protected can be access inside the class that defines the item  and can acess in its child classes  (ie access in its inherited class) .</p>\r\n<p>&nbsp;</p>\r\n<p><strong>Private:</strong></p>\r\n<p>The items which are declared private can only be access inside its class that defines the item.</p>', 24, 1, NULL),
  (26, 'How can we get all the properties of browser in PHP?', 'We can get the browser properties in PHP by:\r\n<pre>\r\n<?php\r\n$_SERVER [\'HTTP_USER_AGENT\'];\r\n?>\r\n</pre>', 23, 0, NULL),
  (27, 'How to get difference between two dates?', '<pre>\r\n$firstdate           = "2010-10-07";\r\n$seconddate      = "2014-03-10";\r\n\r\n$differnce          = abs(strtotime($date2) - strtotime($date1));\r\n\r\n$years              =   floor($differnce / (365*60*60*24));\r\n$months           =   floor(($differnce - $years * 365*60*60*24) / (30*60*60*24));\r\n$days               =   floor(($differnce- $years * 365*60*60*24 - $months*30*60*60*24)/ (60*60*24));\r\n\r\nprintf("%d years, %d months, %d daysn", $years, $months, $days);\r\n</pre>', 24, 0, NULL),
  (28, 'What is the difference between $name and $$name?', '$name is variable where as $$name is reference variable like $name=sonia and $$name=singh so $sonia value is singh', 11, 0, NULL),
  (29, 'What Is a Session?', '<p>A session is a logical object created by the PHP engine to allow you to preserve data across subsequent HTTP requests. Sessions are commonly used to store temporary data to allow multiple PHP pages to offer a complete functional transaction for the same visitor.</p>\r\n<p><a href="http://en.wikipedia.org/wiki/HTTP#HTTP_session" target="_blank" title="">http://en.wikipedia.org/wiki/HTTP#HTTP_session</a></p>\r\n<p><a href="http://en.wikipedia.org/wiki/Session_%28computer_science%29" target="_blank" title="">http://en.wikipedia.org/wiki/Session_%28computer_science%29</a></p>', 1, 1, NULL),
  (30, 'How can we register the variables into a session?', '<p>&lt;?php<br />\r\n	session_register($ur_session_var);<br />\r\n	?&gt;<br />\r\n	&nbsp;</p>\r\n<p>', 5, 0, NULL),
  (31, 'How many ways we can pass the variable through the navigation between the pages?', '<ul>\r\n<li>Register the variable into the session</li>\r\n<li>Pass the variable as a cookie</li>\r\n<li>Pass the variable as part of the URL</li>\r\n</ul>', 6, 0, NULL),
  (32, 'What is the functionality of the function strstr and stristr?', '<p><strong>strstr()</strong> returns part of a given string from the first occurrence of a given substring to the end of the string.<br />\r\nFor example:strstr(&quot;user@example.com&quot;,&quot;@&quot;) will return &quot;@example.com&quot;.<br />\r\n<strong>stristr()</strong> is idential to strstr() except that it is case insensitive.</p>', 7, 0, NULL),
  (33, 'What is Constructors and Destructors?', '<p><strong>CONSTRUCTOR:</strong> PHP allows developers to declare constructor methods for classes. Classes which have a constructor method call this method on each newly-created object, so it is suitable for any initialization that the object may need before it is used.<br />\r\n<p><strong>DESTRUCTORS:</strong> PHP 5 introduces a destructor concept similar to that of other object-oriented languages, such as C++. The destructor method will be called as soon as all references to a particular object are removed or when the object is explicitly destroyed or in any order in shutdown sequence.</p>', 24, 0, NULL),
  (34, 'What is use of header() function in php?', '<p>The header() function sends a raw HTTP header to a client.We can use header()<br />\r\n	function for redirection of pages. It is important to notice that header() must<br />\r\n	be called before any actual output is seen.</p>', 23, 0, NULL),
  (35, 'List out the predefined classes in PHP?', '<ul>\r\n<li>Directory</li>\r\n<li>stdClass</li>\r\n<li>__PHP_Incomplete_Class</li>\r\n<li>exception</li>\r\n<li>php_user_filter</li>\r\n</ul>', 24, 0, NULL),
  (36, 'What type of inheritance that PHP supports?', 'In PHP an extended class is always dependent on a single base class,that is, multiple inheritance is not supported. Classes are extended using the keyword &#39;extends&#39;.', 24, 0, NULL),
  (37, 'What is the difference between explode and split?', 'Split function splits string into array by regular expression. Explode splits a string into array by string.<br />\r\nFor Example:explode(&quot; and&quot;, &quot;India and Pakistan and Srilanka&quot;);<br />\r\n&nbsp;split(&quot; :&quot;, &quot;India : Pakistan : Srilanka&quot;);<br />\r\nBoth of these functions will return an array that contains India, Pakistan, and Srilanka.', 7, 0, NULL),
  (38, 'What&rsquo;s the special meaning of __sleep and __wakeup?', '__sleep returns the array of all the variables than need to be saved, while __wakeup retrieves them.', 24, 0, NULL),
  (39, 'What are the Formatting and Printing Strings available in PHP?', '<p><strong>printf()</strong>-&nbsp;&nbsp; &nbsp;Displays a formatted string<br />\r\n<strong>sprintf()</strong>-Saves a formatted string in a variable<br />\r\n<strong>fprintf()</strong>&nbsp;&nbsp; &nbsp;-Prints a formatted string to a file<br />\r\n<strong>number_format()</strong>-Formats numbers as strings</p>', 7, 0, NULL),
  (40, 'What are the different tables types present in MySQL?', '<p></em>Total 5 types of tables we can create<br>\r\n1. MyISAM<br>\r\n2. Heap<br>\r\n3. Merge<br>\r\n4. INNO DB<br>\r\n5. ISAM<br>\r\nMyISAM is the default storage engine as of MySQL 3.23 and as a result if we do not specify the table name explicitly it will be assigned to the default engine.</p>', 7, 0, NULL),
  (41, 'How can I execute a PHP script using command line?', 'As of version 4.3.0, PHP supports a new SAPI type (Server Application Programming Interface) named CLI which means Command Line Interface. Just run the PHP CLI (Command Line Interface) program and provide the PHP script file name as the command line argument. For example, “php myScript.php”, assuming “php” is the command to invoke the CLI program.\r\nBe aware that if your PHP script was written for the Web CGI interface, it may not execute properly in command line environment.', 3, 0, NULL),
  (42, 'How can we encrypt the username and password using PHP?', '<p>The functions in this section perform encryption and decryption, and compression and uncompression:</p>\r\n<table border="0">\r\n<tbody>\r\n<tr>\r\n<td><strong>Encryption</strong></td>\r\n<td><strong>Decryption</strong></td>\r\n</tr>\r\n<tr>\r\n<td>AES_ENCRYPT()</td>\r\n<td>AES_DECRYPT()</td>\r\n</tr>\r\n<tr>\r\n<td>ENCODE()</td>\r\n<td>DECODE()</td>\r\n</tr>\r\n<tr>\r\n<td>DES_ENCRYPT()</td>\r\n<td>DES_DECRYPT()</td>\r\n</tr>\r\n<tr>\r\n<td>ENCRYPT()</td>\r\n<td>Not available</td>\r\n</tr>\r\n<tr>\r\n<td>MD5()</td>\r\n<td>Not available</td>\r\n</tr>\r\n<tr>\r\n<td>OLD_PASSWORD()</td>\r\n<td>Not available</td>\r\n</tr>\r\n<tr>\r\n<td>PASSWORD()</td>\r\n<td>Not available</td>\r\n</tr>\r\n<tr>\r\n<td>SHA() or SHA1()</td>\r\n<td>Not available</td>\r\n</tr>\r\n<tr>\r\n<td>Not available</td>\r\n<td>UNCOMPRESSED_LENGTH()</td>\r\n</tr>\r\n</tbody>\r\n</table>', 7, 0, NULL),
  (43, 'What are the features and advantages of object-oriented programming?', 'One of the main advantages of OO programming is its ease of modification; objects can easily be modified and added to a system there by reducing maintenance costs. OO programming is also considered to be better at modeling the real world than is procedural programming. It allows for more complicated and flexible interactions. OO systems are also easier for non-technical personnel to understand and easier for them to participate in the maintenance and enhancement of a system because it appeals to natural human cognition patterns. For some systems, an OO approach can speed development time since many objects are standard across systems and can be reused. Components that manage dates, shipping, shopping carts, etc. can be purchased and easily modified for a specific system.', 24, 1, NULL),
  (44, 'What are the differences between procedure-oriented languages and object-oriented languages?', 'Traditional programming has the following characteristics:Functions are written sequentially, so that a change in programming can affect any code that follows it. If a function is used multiple times in a system (i.e., a piece of code that manages the date), it is often simply cut and pasted into each program (i.e., a change log, order function, fulfillment system, etc). If a date change is needed (i.e., Y2K when the code needed to be changed to handle four numerical digits instead of two), all these pieces of code must be found, modified, and tested. Code (sequences of computer instructions) and data (information on which the instructions operates on) are kept separate. Multiple sets of code can access and modify one set of data. One set of code may rely on data in multiple places. Multiple sets of code and data are required to work together. Changes made to any of the code sets and data sets can cause problems through out the system.Object-Oriented programming takes a radically different approach:Code and data are merged into one indivisible item – an object (the term “component” has also been used to describe an object.) An object is an abstraction of a set of real-world things (for example, an object may be created around “date”) The object would contain all information and\r\nfunctionality for that thing (A date object it may contain labels like January, February, Tuesday, Wednesday.\r\nIt may contain functionality that manages leap years, determines if it is a business day or a holiday, etc., See Fig. 1). Ideally, information about a particular thing should reside in only one place in a system.The information within an object is encapsulated (or hidden) from the rest of the system. A system is composed of multiple objects (i.e., date function, reports, order processing, etc., See Fig 2). When one object needs information from another object, a request is sent asking for specific information. (for example, a report object may need to know what today’s date is and will send a request to the date object) These requests are called messages and each object has an interface that manages messages. OO programming languages include features such as “class”, “instance”, “inheritance”, and “polymorphism” that increase the power and\r\nflexibility of an object.', 24, 1, 'OOP'),
  (45, 'What are the differences between public, private, protected,static, transient, final and volatile?', '<p><strong>Public</strong>: Public declared items can be accessed everywhere.<br>\r\n<strong>Protected</strong>: Protected limits access to inherited and parent classes (and to the class that defines the item).<br>\r\n<strong>Private</strong>: Private limits visibility only to the class that defines the item.<br>\r\n<strong>Static</strong>: A static variable exists only in a local function scope, but it does not lose its value when program execution leaves this scope.<br>\r\n<strong>Final</strong>: Final keyword prevents child classes from overriding a method by prefixing the definition with final. If the class itself is being defined final then it cannot be extended.<br>\r\n<strong>Transient</strong>: A transient variable is a variable that may not be serialized.<br>\r\n<strong>Volatile</strong>: a variable that might be concurrently modified by multiple threads should be declared volatile. Variables declared to be volatile will not be optimized by the compiler because their value can change at any time.</p>', 24, 1, 'OOP'),
  (46, 'What are the different types of errors in PHP?', '<p>Three are three types of errors:</p>\r\n<ul>\r\n	<li>Notices: These are trivial, non-critical errors that PHP encounters while executing a script - for example, accessing a variable that has not yet been defined. By default, such errors are not displayed to the user at all – although, as you will see, you can change this default behavior.</li>\r\n	<li>Warnings: These are more serious errors – for example, attempting to include() a file which does not exist. By default, these errors are displayed to the user, but they do not result in script termination.</li>\r\n	<li>Fatal errors: These are critical errors – for example, instantiating an object of a non-existent class, or calling a non-existent function. These errors cause the immediate termination of the script, and PHP’s default behavior is to display them to the user when they take place.</li>\r\n</ul>', 7, 0, 'Errors'),
  (47, 'What are the difference between abstract class and interface?', '<p><em>Abstract class</em>: abstract classes are the class where one or moremethods are abstract but not necessarily all method has to be abstract.</p>', 24, 0, 'OOP'),
  (48, 'What are the advantages of stored procedures, triggers, indexes?', '<p><strong>Answer</strong><em> : </em>A stored procedure is a set of SQL commands that can be compiled and stored in the server. Once this has been done, clients don’t need tokeep re-issuing the entire query but can refer to the stored <span class="skimlinks-unlinked">procedure.This</span> provides better overall performance because the query has to beparsed only once, and less information needs to be sent between theserver and the client. You can also raise the conceptual level by havinglibraries of functions in the server. However, stored procedures ofcourse do increase the load on the database server <a id="KonaLink5" class="kLink" href="http://www.shashionline.in/2008/08/02/php-interview-question/#" target="_top" sl-processed="1"></a>system, as more of the work is done on the server side and less on the client (application)side.Triggers will also be implemented. A trigger is effectively a type of stored procedure, one that is invoked when a particular event <span class="skimlinks-unlinked">occurs.For</span> example, you can install a stored procedure that is triggered each time a record is deleted from a transaction table and that stored procedure automatically deletes the corresponding customer from a customer table when all his transactions are deleted.Indexes are used to find rows with specific column values quickly.Without an index, MySQL must begin with the first row and then read through the entire table to find the relevant rows. The larger the table, the more this costs. If the table has an index for the columns in question, MySQL can quickly determine the position to seek to in the middle of the data file without having to look at all the data. If a table has 1,000 rows, this is at least 100 times faster than reading sequentially. If you need to access most of the rows, it is faster to read sequentially, because this minimizes disk seeks.</p>', 7, 0, 'MySQL'),
  (49, 'What is the maximum length of a table name, database name and field name in MySQL?', '<p>The following table describes the maximum length for each type of identifier.</p>\r\n<table border="0">\r\n<tbody>\r\n<tr>\r\n<td>Identifier</td>\r\n<td>Maximum Length(bytes)</td>\r\n</tr>\r\n<tr>\r\n<td>Database</td>\r\n<td>64</td>\r\n</tr>\r\n<tr>\r\n<td>Table</td>\r\n<td>64</td>\r\n</tr>\r\n<tr>\r\n<td>Column</td>\r\n<td>64</td>\r\n</tr>\r\n<tr>\r\n<td>Index</td>\r\n<td>64</td>\r\n</tr>\r\n<tr>\r\n<td>Alias</td>\r\n<td>255</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n<p>There are some restrictions on the characters that may appear in identifiers.</p>', 7, 0, 'MySQL'),
  (50, 'What is class?', 'Class is a collection of variables and method.', 24, 0, 'OOP'),
  (51, 'What is data encapsulation and how to achieve it PHP?', 'Data encapsulation is hiding the member variables and method from the access of others.In PHP data encapsulation is implementated with concept called Class. Class is the collection of variable and method whoes access to other classes is defined in the class  itself.', 24, 0, 'OOP'),
  (52, 'What is the difference between errors and exceptions?', 'An error is a fatal to the programs’s ability to do its job. Where as an exception is a stituation which is uncommon but recoverable.', 7, 0, 'Errors'),
  (53, 'What is HTTP?', 'The Hypertext Transfer Protocol (HTTP) is an application protocol for distributed, collaborative, hypermedia information systems.[1] HTTP is the foundation of data communication for the World Wide Web.', 23, 1, 'HTTP'),
  (54, 'Which is the most appropriate function to remove first element in an array?', '<p><strong>array_shift()</strong> is the function used to remove the first element of an array in PHP. Comes in handy when you need to use the first item in an array.</p>\r\n', 8, 0, 'Array'),
  (55, 'chr() works with which encoding?', 'chr() Returns a one-character string containing the character specified by ascii.', 7, 0, 'Strings'),
  (56, 'Is it possible to use feof () with a file opened by fsockopen()?', 'Yes: <a href="" target="_blank">http://php.net/manual/en/function.feof.php</a>', 23, 0, 'IO'),
  (57, 'What\'s the difference between a left join and an inner join?', '<a href="http://stackoverflow.com/questions/448023/what-is-the-difference-between-left-right-outer-and-inner-joins">http://stackoverflow.com/questions/448023/what-is-the-difference-between-left-right-outer-and-inner-joins</a>', 23, 1, 'Operators'),
  (58, 'Associativity of += is?', '<p>Right</p>\r\n<p>+= is an assignment operator. All assignment operators have right associativity You can learn more from SkillCaptains Advanced PHP guide, or at <a href="http://php.net/manual/en/language.operators.precedence.php" title="Operators precedence" target="_blank">http://php.net/manual/en/language.operators.precedence.php</a></p>', 23, 0, 'Operators'),
  (59, 'What are the 3 main principles of OOP?', '<p>1) Encapsulation <br>2) Inheritance <br> 3) Polymorphysm</p>', 59, 1, 'OOP'),
  (60, 'What is a Cookie?', 'A cookie, also known as an HTTP cookie, web cookie, or browser cookie, is a small piece of data sent from a website and stored in a user\'s web browser while the user is browsing that website.<br><br>\r\n<a href="http://en.wikipedia.org/wiki/HTTP_cookie" title="Cookie wikipedia" target="_blank">http://en.wikipedia.org/wiki/HTTP_cookie</a>', 2, 1, 'Session and Cookies'),
  (61, 'What is the database normalization?', '<p>Database normalization is the process of organizing the fields and tables of a relational database to minimize redundancy.</p>\r\n\r\n<p><a href="http://en.wikipedia.org/wiki/Database_normalization" target="_blank">http://en.wikipedia.org/wiki/Database_normalization</a></p>', 7, 1, 'MySQL'),
  (62, 'What are SOLID principles?', '<p>Single responsability principles (SRP) : a class should have only a single responsibility (i.e. only one potential change in the software\'s specification should be able to affect the specification of the class)</p>\r\n	\r\n<p>Open/closed principle (OCP): "software entities … should be open for extension, but closed for modification."</p>\r\n		\r\n<p>Liskov substitution principle (LSP): "objects in a program should be replaceable with instances of their subtypes without altering the correctness of that program." See also design by contract.</p>\r\n		\r\n<p>Interface segregation principle: "many client-specific interfaces are better than one general-purpose interface."</p>\r\n		\r\n<p>Dependency inversion principle: one should "Depend upon Abstractions. Do not depend upon concretions.". Dependency injection is one method of following this principle.</p>\r\n	\r\n<p><a href="http://en.wikipedia.org/wiki/SOLID_(object-oriented_design)" target="_blank">http://en.wikipedia.org/wiki/SOLID_(object-oriented_design)</a></p>', 12, 1, 'OOP'),
  (63, 'What are main vulnerabilities on web applications?', '<p>Cross site scripting (XSS), <a href="http://en.wikipedia.org/wiki/Cross-site_scripting" target="_blank">http://en.wikipedia.org/wiki/Cross-site_scripting</a></p>\r\n\r\n<p>Cross-site request forgery (CRSF), <a href="http://en.wikipedia.org/wiki/Cross-site_request_forgery" target="_blank">http://en.wikipedia.org/wiki/Cross-site_request_forgery</a></p>', 20, 0, 'Security'),
  (64, 'What is OOP?', '<p>Object-oriented programming (OOP) is a programming paradigm that represents the concept of "objects" that have data fields (attributes that describe the object) and associated procedures known as methods. Objects, which are usually instances of classes, are used to interact with one another to design applications and computer programs.</p>', 24, 1, 'OOP'),
  (65, 'What is the cause of this warning: \'Warning: Cannot modify header information - headers already sent\', and what is a good practice to prevent it?', '<strong>A</strong>: *Cause:* body data was sent, causing headers to be sent too.<br>\r\n<strong>Prevention</strong>: Be sure to execute header specific code first before you output any body data. Be sure you haven\'t accidentally sent out whitespace or any other characters.', 25, 0, 'OOP'),
  (66, 'What is T_PAAMAYIM_NEKUDOTAYIM?', 'ts the scope resolution operator (double colon)<br><br>\r\n<a href="http://en.wikipedia.org/wiki/Scope_resolution_operator#PHP" title="PHP scope resolution operator">http://en.wikipedia.org/wiki/Scope_resolution_operator#PHP</a>', 26, 0, 'PHP'),
  (67, 'What is wrong with this query: "SELECT * FROM table WHERE id = $_POST[ \'id\' ]"?', '1. It is vulnarable to SQL injection. Never use user input directly in queries. Sanitize it first. Preferebly use prepared statements (<a href="http://php.net/manual/en/book.pdo.php" rel="nofollow">PDO</a>) <br>\r\n2. Don\'t select all columns (*), but specify every single column. This is predominantly ment to prevent queries hogging up memory when for instance a BLOB column is added at some point in the future.', 27, 0, 'PHP'),
  (68, 'How to deal with SQL injection ?', 'mysql_real_escape_string() for a start with MySQL. Then try to learn PDO to take advantage of prepared statements and portability across database vendors.', 28, 0, 'Security'),
  (69, 'How to deal with CSRF (Cross-Site Request Forgery) ?', 'Add a token on every important request to secure important operations (user must have seen the form before sending the crucial request).?', 28, 0, 'Security'),
  (70, 'How to deal XSS (Cross-Site Scripting) reflected and stored ?', 'htmlentities() is good for a start.', 28, 0, 'Security'),
  (71, 'Variant of XXX injections: LDAP injection, XPath injection, etc... ?', 'You need to know what is the "vocabulary" used by the XXX and then deduct what you need to sanitize and/or "check-and-reject".', 28, 0, 'Security'),
  (72, 'What is the list of sensible functions ?', 'Functions which interpret PHP code (possibly included in a remote file) or which execute command on your system. A short and incomplete list could be: exec(), passthru(), system(), popen(), eval(), preg_replace()...', 28, 0, 'Security'),
  (73, 'What are the differences between PHP3, PHP4, and PHP5?', 'PHP3 is oldest stable version and it was pure procedural language constructive like C. <br>\r\nWhere as PHP4 have some OOPs concept added like class and object with new functionality and in PHP5 approximately all major oops functionality has been added along with below thing. <br>\r\n- Implementation of exceptions and exception handling <br>\r\n- Type hinting which allows you to force the type of a specific argument<br>\r\n3. Overloading of methods through the __call function<br>\r\n4. Full constructors and destructors etc through a __constuctor and __destructor function<br>\r\n5. __autoload function for dynamically including certain include files depending on the class you are trying to create.<br>\r\n6 Finality : can now use the final keyword to indicate that a method cannot be overridden by a child. You can also declare an entire class as final which prevents it from having any children at all.<br>\r\n7 Interfaces & Abstract Classes<br>\r\n8 Passed by Reference :<br>\r\n9 An __clone method if you really want to duplicate an object<br>\r\n10 Numbers of Functions Deprecated or removed in PHP5.x like ereg,ereg_replace,magic_quotes, session_register,register_globals, split(), call_user_method() etc<br>', 16, 1, 'Cache'),
  (74, 'A select query over a large table runs very slow because of the growing number of entries in a table. What different measures could be taken to improv', 'Use Indexes, write table fields to select, use "limit" when possibile, use explain to see some info about the query', 16, 1, 'MySQL'),
  (75, 'How can we increase the execution time of a PHP script?', 'You can do it with htaccess files: <br>\r\n\r\n<pre>\r\n<IfModule mod_php5.c>\r\nphp_value max_execution_time 259200\r\n</IfModule>\r\n</pre>\r\n\r\n or PHP: <br>\r\n\r\n<pre>ini_set(\'max_execution_time\', 300); set_time_limit(0);</pre>', 16, 0, 'MySQL'),
  (76, 'What are different types of tables in MySQL and their differences.', 'MySQL table types: \r\n\r\n\r\n<ul><li>MyISAM</li><li>InnoDB</li><li>MERGE</li><li>MEMORY (HEAP)</li><li>ARCHIVE</li><li>CSV</li><li>FEDERATED</li></ul>\r\n\r\n\r\n<strong>MyISAM</strong><br>\r\n\r\nMyISAM extends the former ISAM storage engine. The MyISAM tables are optimized for compression an speed. MyISAM tables are also portable between platforms and OSes.\r\n\r\nThe size of MyISAM table can be up to 256TB, which is huge. In addition, MyISAM tables can be compressed into read-only tables to save space. At startup, MySQL checks MyISAM tables for corruption and even repair them in case of errors. The MyISAM tables are not transaction-safe.\r\n\r\nBefore MySQL version 5.5, MyISAM is the default storage engine when you create a table without explicitly specify the storage engine. From version 5.5, MySQL uses InnoDB as the default storage engine.\r\n\r\n<strong>InnoDB</strong><br>\r\n\r\nThe InnoDB tables fully support ACID-compliant and transactions. They are also very optimal for performance. InnoDB table supports foreign keys, commit, rollback, roll-and forward operations. The size of the InnoDB table can be up to 64TB.\r\n\r\nLike MyISAM, the InnoDB tables are portable between different platforms and OSes. MySQL also checks and repair InnoDB tables, if necessary, at startup.\r\n\r\n<strong>MERGE</strong><br>\r\n\r\nA MERGE table is a virtual table that combines multiple MyISAM tables, which has similar structure, into one table. The MERGE storage engine is also known as the MRG_MyISAM engine. The MERGE table does not have its own indexes; it uses indexes of the component tables instead.\r\n\r\nUsing MERGE table, you can speed up performance in joining multiple tables. MySQL only allows you to perform SELECT, DELETE, UPDATE and INSERT operations on the MERGE tables. If you use DROP TABLE statement on a MERGE table, only MERGE specification is removed. The underlying tables will not be affected.\r\n\r\n<strong>Memory</strong><br>\r\n\r\nThe memory tables are stored in memory and used hash indexes so that they are faster than MyISAM tables. The lifetime of the data of the memory tables depends on the up time of the database server. The memory storage engine is formerly known as HEAP.\r\n\r\n<strong>Archive</strong><br>\r\n\r\nThe archive storage engine allows you to store a large number of records, which for archiving purpose, into a compressed format to save disk space. The archive storage engine compresses a record when it is inserted and decompress it using zlib library as it is read.\r\n\r\nThe archive tables only allow INSERT and SELECT commands. The archive tables do not support indexes, so reading records requires a full table scanning.\r\n\r\n<strong>CSV</strong><br>\r\n\r\nThe CSV storage engine stores data in comma-separated values file format. A CSV table brings a convenient way to migrate data into non-SQL applications such as spreadsheet software.\r\n\r\nCSV table does not support NULL data type and read operation requires a full table scan.\r\n\r\n<strong>FEDERATED</strong><br>\r\n\r\nThe FEDERATED storage engine allows you to manage data from a remote MySQL server without using cluster or replication technology. The local federated table stores no data. When you query data from a local federated table, the data is pull automatically from the remote federated tables.', 16, 0, 'MySQL'),
  (77, 'What is the difference between GROUP BY and ORDER BY in SQL', 'ORDER BY alters the order in which items are returned.<br><br>\r\n\r\nGROUP BY will aggregate records by the specified columns which allows you to perform aggregation functions on non-grouped columns (such as SUM, COUNT, AVG, etc).', 16, 0, 'MySQL'),
  (78, 'What is an EXPLAIN? What does its result look like?', 'The DESCRIBE and EXPLAIN statements are synonyms.  EXPLAIN is used to obtain a query execution plan', 16, 0, 'MySQL');
/*!40000 ALTER TABLE `interview` ENABLE KEYS */;


-- Dumping structure for table quiz.interview_relations
DROP TABLE IF EXISTS `interview_relations`;
CREATE TABLE IF NOT EXISTS `interview_relations` (
  `id` bigint(20) NOT NULL AUTO_INCREMENT,
  `topic_id` bigint(20) DEFAULT NULL,
  `question_id` bigint(20) DEFAULT NULL,
  PRIMARY KEY (`id`),
  KEY `fk_interview_topic_id` (`topic_id`),
  KEY `fk_interview_question_id` (`question_id`),
  CONSTRAINT `fk_interview_question_id` FOREIGN KEY (`question_id`) REFERENCES `interview` (`id`),
  CONSTRAINT `fk_interview_topic_id` FOREIGN KEY (`topic_id`) REFERENCES `topics` (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=79 DEFAULT CHARSET=latin1;

-- Dumping data for table quiz.interview_relations: ~78 rows (approximately)
DELETE FROM `interview_relations`;
/*!40000 ALTER TABLE `interview_relations` DISABLE KEYS */;
INSERT INTO `interview_relations` (`id`, `topic_id`, `question_id`) VALUES
  (1, 8, 1),
  (2, 8, 2),
  (3, 8, 3),
  (4, 8, 4),
  (5, 8, 5),
  (6, 8, 6),
  (7, 8, 7),
  (8, 8, 8),
  (9, 8, 9),
  (10, 8, 10),
  (11, 8, 11),
  (12, 8, 12),
  (13, 8, 13),
  (14, 8, 14),
  (15, 8, 15),
  (16, 8, 16),
  (17, 8, 17),
  (18, 8, 18),
  (19, 8, 19),
  (20, 8, 20),
  (21, 8, 21),
  (22, 8, 22),
  (23, 8, 23),
  (24, 8, 24),
  (25, 8, 25),
  (26, 8, 26),
  (27, 8, 27),
  (28, 8, 28),
  (29, 8, 29),
  (30, 8, 30),
  (31, 8, 31),
  (32, 8, 32),
  (33, 8, 33),
  (34, 8, 34),
  (35, 8, 35),
  (36, 8, 36),
  (37, 8, 37),
  (38, 8, 38),
  (39, 8, 39),
  (40, 8, 40),
  (41, 8, 41),
  (42, 8, 42),
  (43, 8, 43),
  (44, 8, 44),
  (45, 8, 45),
  (46, 8, 46),
  (47, 8, 47),
  (48, 8, 48),
  (49, 8, 49),
  (50, 8, 50),
  (51, 8, 51),
  (52, 8, 52),
  (53, 8, 53),
  (54, 8, 54),
  (55, 8, 55),
  (56, 8, 56),
  (57, 8, 57),
  (58, 8, 58),
  (59, 8, 59),
  (60, 8, 60),
  (61, 8, 61),
  (62, 8, 62),
  (63, 8, 63),
  (64, 8, 64),
  (65, 8, 65),
  (66, 8, 66),
  (67, 8, 67),
  (68, 8, 68),
  (69, 8, 69),
  (70, 8, 70),
  (71, 8, 71),
  (72, 8, 72),
  (73, 8, 73),
  (74, 8, 74),
  (75, 8, 75),
  (76, 8, 76),
  (77, 8, 77),
  (78, 8, 78);
/*!40000 ALTER TABLE `interview_relations` ENABLE KEYS */;


-- Dumping structure for table quiz.interview_tags_relations
DROP TABLE IF EXISTS `interview_tags_relations`;
CREATE TABLE IF NOT EXISTS `interview_tags_relations` (
  `id` bigint(20) NOT NULL AUTO_INCREMENT,
  `question_id` bigint(20) DEFAULT NULL,
  `tag_id` bigint(20) DEFAULT NULL,
  PRIMARY KEY (`id`),
  KEY `question_id` (`question_id`),
  KEY `tag_id` (`tag_id`),
  CONSTRAINT `interview_tags_relations_ibfk_1` FOREIGN KEY (`question_id`) REFERENCES `interview` (`id`),
  CONSTRAINT `interview_tags_relations_ibfk_2` FOREIGN KEY (`tag_id`) REFERENCES `tags` (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=56 DEFAULT CHARSET=latin1 ROW_FORMAT=COMPACT;

-- Dumping data for table quiz.interview_tags_relations: ~55 rows (approximately)
DELETE FROM `interview_tags_relations`;
/*!40000 ALTER TABLE `interview_tags_relations` DISABLE KEYS */;
INSERT INTO `interview_tags_relations` (`id`, `question_id`, `tag_id`) VALUES
  (1, 1, 1),
  (2, 2, 1),
  (3, 3, 1),
  (4, 4, 28),
  (5, 4, 31),
  (6, 5, 92),
  (7, 5, 2),
  (8, 6, 2),
  (9, 7, 31),
  (10, 8, 86),
  (11, 9, 2),
  (12, 10, 2),
  (13, 11, 2),
  (14, 12, 35),
  (15, 13, 35),
  (16, 14, 2),
  (17, 15, 1),
  (18, 16, 2),
  (19, 17, 50),
  (20, 18, 50),
  (21, 18, 92),
  (22, 20, 22),
  (23, 21, 35),
  (24, 22, 35),
  (25, 23, 27),
  (26, 24, 35),
  (27, 25, 35),
  (28, 26, 27),
  (29, 27, 25),
  (30, 28, 4),
  (31, 29, 28),
  (32, 30, 28),
  (33, 31, 27),
  (34, 32, 70),
  (35, 33, 35),
  (36, 34, 32),
  (37, 35, 35),
  (38, 36, 35),
  (39, 37, 2),
  (40, 37, 89),
  (41, 37, 70),
  (42, 38, 35),
  (43, 38, 45),
  (44, 39, 70),
  (45, 40, 80),
  (46, 41, 94),
  (47, 42, 62),
  (48, 43, 35),
  (49, 44, 35),
  (50, 45, 35),
  (51, 46, 95),
  (52, 46, 95),
  (53, 47, 86),
  (54, 48, 96),
  (55, 49, 80);
/*!40000 ALTER TABLE `interview_tags_relations` ENABLE KEYS */;


-- Dumping structure for table quiz.quiz_answers
DROP TABLE IF EXISTS `quiz_answers`;
CREATE TABLE IF NOT EXISTS `quiz_answers` (
  `id` bigint(20) NOT NULL AUTO_INCREMENT,
  `answer` text,
  `correct` varchar(255) DEFAULT NULL,
  `question_id` bigint(20) DEFAULT NULL,
  PRIMARY KEY (`id`),
  KEY `question_id` (`question_id`),
  CONSTRAINT `fk_question_id` FOREIGN KEY (`question_id`) REFERENCES `quiz_questions` (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=1016 DEFAULT CHARSET=latin1;

-- Dumping data for table quiz.quiz_answers: ~974 rows (approximately)
DELETE FROM `quiz_answers`;
/*!40000 ALTER TABLE `quiz_answers` DISABLE KEYS */;
INSERT INTO `quiz_answers` (`id`, `answer`, `correct`, `question_id`) VALUES
  (1, '<SCRIPT LANGUAGE="php">', '1', 1),
  (2, '<!', '0', 1),
  (3, '<%', '1', 1),
  (4, '<?php', '1', 1),
  (5, '<?', '1', 1),
  (6, '@$foo', '1', 2),
  (7, '&$variable', '1', 2),
  (8, '${0x0}', '1', 2),
  (9, '$variable', '1', 2),
  (10, '$0x0', '0', 2),
  (11, 'You cannot modify an array during iteration', '0', 3),
  (12, ' for($i = 0; $i < count($array); $i++) { /* ... */ }', '0', 3),
  (13, 'foreach($array as $key => &$val) { /* ... */ }', '1', 3),
  (14, 'foreach($array as $key => $val) { /* ... */ }', '0', 3),
  (15, 'while(list($key, $val) = each($array)) { /* ... */}', '0', 3),
  (16, 'FOO', '0', 4),
  (17, '100', '0', 4),
  (18, '200', '1', 4),
  (19, '20', '0', 4),
  (20, '10', '0', 4),
  (21, '643.75', '1', 5),
  (22, '432', '0', 5),
  (23, '643', '0', 5),
  (24, '257', '0', 5),
  (25, '432.75', '0', 5),
  (26, 'false, true, true, true', '0', 6),
  (27, 'true, false, true, false', '1', 6),
  (28, 'true, true, false, false', '0', 6),
  (29, ' false, true, true, false', '0', 6),
  (30, 'false, false, true, false', '0', 6),
  (31, '312211', '1', 7),
  (32, '3312212', '0', 7),
  (33, ' 11221221', '0', 7),
  (34, '221131', '0', 7),
  (35, '3211122', '0', 7),
  (36, 'function myfunction(stdClass $a)', '1', 8),
  (37, 'function myfunciton($a = stdClass)', '0', 8),
  (38, 'Use is_object() within the function', '0', 8),
  (39, 'There is no way to ensure the parameter will be an object', '0', 8),
  (40, 'function myfunction(Object $a)', '0', 8),
  (41, 'Loops infinitely', '0', 9),
  (42, 'Switches the values of $p and $q', '0', 9),
  (43, ' Determines if they are both even or odd', '0', 9),
  (44, 'Determines the greatest common divisor between them', '1', 9),
  (45, 'Calculates the modulus between the two', '0', 9),
  (46, '!==', '0', 10),
  (47, 'instanceof', '0', 10),
  (48, '=', '0', 10),
  (49, '==', '0', 10),
  (50, ' ===', '1', 10),
  (51, 'quit();', '0', 11),
  (52, 'die();', '1', 11),
  (53, ' stop();', '0', 11),
  (54, '__halt_compiler();', '1', 11),
  (55, 'exit();', '1', 11),
  (56, '20', '1', 12),
  (57, '22', '0', 12),
  (58, '18', '0', 12),
  (59, '$a is an invalid value', '0', 12),
  (60, '2', '0', 12),
  (61, '120', '1', 13),
  (62, 'Syntax Error', '0', 13),
  (63, '60', '0', 13),
  (64, '70', '0', 13),
  (65, 'There is no way to do this', '0', 14),
  (66, '$string = $argv[1];', '0', 14),
  (67, '$string = $_ARGV[0];', '0', 14),
  (68, 'list($string) = func_get_args();', '1', 14),
  (69, '$string = get_function_args()', '0', 14),
  (70, '1: 2, 2: 20, 3: 15', '0', 15),
  (71, '1: 3, 2:21, 3:16', '0', 15),
  (72, '1: 2, 2:21, 3:15', '0', 15),
  (73, '1: 3, 2: 20, 3: 15', '0', 15),
  (74, '1: 2, 2: 20, 3: 16', '1', 15),
  (75, 'if(strpos($mystring, "PHP") !== false)', '1', 16),
  (76, ' if(!strpos($mystring,"PHP"))', '0', 16),
  (77, 'if(strpos($mystring, "PHP") === true)', '0', 16),
  (78, 'if(strloc($mystring, "PHP") == true)', '0', 16),
  (79, 'if(strloc($mystring, "PHP") === false)', '0', 16),
  (80, '10,20', '0', 17),
  (81, 'You cannot modify private member variables of a different class', '0', 17),
  (82, '20,20', '1', 17),
  (83, '10,10', '0', 17),
  (84, '20,10', '0', 17),
  (85, 'protected', '1', 18),
  (86, 'public', '1', 18),
  (87, 'static', '0', 18),
  (88, 'private', '1', 18),
  (89, 'final', '0', 18),
  (90, 'if($obj1->equals($obj2) && ($obj1 instanceof $obj2))', '0', 19),
  (91, 'if($obj1->equals($obj2))', '0', 19),
  (92, 'if($obj1 === $obj2)', '1', 19),
  (93, 'if($obj1 instanceof $obj2)', '0', 19),
  (94, 'if($obj1 == $obj2)', '0', 19),
  (95, 'instanceof, is_a', '0', 20),
  (96, 'instanceof, type-hinting', '1', 20),
  (97, 'type, instanceof', '0', 20),
  (98, '===, type-hinting', '0', 20),
  (99, '===, is_a', '0', 20),
  (100, 'You must use return &$newObj instead', '0', 21),
  (101, 'There is nothing wrong with this code', '0', 21),
  (102, 'duplicate() must accept its parameter by reference', '0', 21),
  (103, 'You must use the clone operator to make a copy of an object', '1', 21),
  (104, 'duplicate() must return a reference', '0', 21),
  (105, 'Put the logic in the object\'s constructor to alter the values', '0', 22),
  (106, 'Implment your own function to do object copying', '0', 22),
  (107, ' Implement the object\'s __clone() method', '1', 22),
  (108, 'Implement __get() and __set() methods with the correct logic', '0', 22),
  (109, 'Implement the __copy() method with the correct logic', '0', 22),
  (110, ' Static methods can only be called using the :: syntax and never from an instance', '0', 23),
  (111, 'Static methods do not provide a reference to $this', '1', 23),
  (112, 'Static methods cannot be called from within class instances', '0', 23),
  (113, 'Static methods don\'t have access to the self keyword', '0', 23),
  (114, 'There is no functional difference between a static and non-static method', '0', 23),
  (115, 'a: 30, b: 30', '0', 24),
  (116, 'a: 30, b: 20', '0', 24),
  (117, 'a: 30, b: 10', '1', 24),
  (118, 'a: 20, b: 20', '0', 24),
  (119, ' a: 10, b: 10', '0', 24),
  (120, 'final', '0', 25),
  (121, 'protected', '0', 25),
  (122, 'incomplete', '0', 25),
  (123, 'abstract', '1', 25),
  (124, 'implements', '0', 25),
  (125, 'array, interface', '0', 26),
  (126, ' interface, implements', '1', 26),
  (127, 'interface, extends', '0', 26),
  (128, 'instance, implements', '0', 26),
  (129, 'access-list, instance', '0', 26),
  (130, 'If a particular child class extends from it', '0', 27),
  (131, 'If they are an instance of a particular interface', '1', 27),
  (132, ' If they are an abstract class', '0', 27),
  (133, ' If they have a particular parent class', '1', 27),
  (134, ' If they are an instance of a particular class', '1', 27),
  (135, 'None of the above', '0', 28),
  (136, 'interfaces, child', '0', 28),
  (137, 'children, interface', '0', 28),
  (138, 'interfaces, parent', '1', 28),
  (139, 'parents, interface', '0', 28),
  (140, '__get($variable)', '1', 29),
  (141, '__call($method, $params)', '1', 29),
  (142, ' __get($method)', '0', 29),
  (143, '__set($variable, $value)', '1', 29),
  (144, '__call($method)', '0', 29),
  (145, 'getString()', '0', 30),
  (146, ' __get()', '0', 30),
  (147, '__value()', '0', 30),
  (148, '__toString()', '1', 30),
  (149, ' __getString()', '0', 30),
  (150, '__destroy()', '0', 31),
  (151, '__serialize()', '0', 31),
  (152, '__destruct()', '0', 31),
  (153, '__shutdown()', '0', 31),
  (154, '__sleep()', '1', 31),
  (155, ' "Caught Exception" followed by "Didn\'t catch the Exception!"', '0', 32),
  (156, 'A fatal error for an uncaught exception', '0', 32),
  (157, '"Didn\'t catch the Exception!"', '1', 32),
  (158, '"Didn\'t catch the Exception!" followed by a fatal error', '0', 32),
  (159, ' "Caught Exception"', '0', 32),
  (160, 'iteration', '0', 33),
  (161, 'arrayaccess', '1', 33),
  (162, 'objectarray', '0', 33),
  (163, 'iterator', '1', 33),
  (164, 'array', '0', 33),
  (165, 'You cannot disable remote PHP script execution', '0', 34),
  (166, 'curl.enabled', '0', 34),
  (167, 'allow_remote_url', '0', 34),
  (168, 'allow_url_fopen', '1', 34),
  (169, 'allow_require', '0', 34),
  (170, 'Not writing Javascript on the fly using PHP', '0', 35),
  (171, 'Filtering Output used in form data', '0', 35),
  (172, 'Filtering Output used in database transactions', '0', 35),
  (173, 'Writing careful Javascript', '0', 35),
  (174, 'Filtering all input', '1', 35),
  (175, ' safe_mode', '0', 36),
  (176, 'magic_quotes_gpc', '1', 36),
  (177, 'register_globals', '1', 36),
  (178, 'display_errors', '1', 36),
  (179, 'allow_url_fopen', '1', 36),
  (180, 'None of the above', '1', 37),
  (181, '$_ENV', '0', 37),
  (182, '$_GET', '0', 37),
  (183, '$_COOKIE', '0', 37),
  (184, '$_SERVER', '0', 37),
  (185, 'None of the above', '0', 38),
  (186, 'Never trust any data from the user', '1', 38),
  (187, 'Enable built-in security features such as magic_quotes_gpc and safe_mode', '0', 38),
  (188, 'Always filter all incoming data', '0', 38),
  (189, 'Use PHP 5\'s tainted mode', '0', 38),
  (190, 'Cross-Site Scripting Attack', '0', 39),
  (191, 'There is no security hole in this code', '1', 39),
  (192, 'Code Injection', '0', 39),
  (193, 'SQL Injection', '0', 39),
  (194, 'Cross-Site Request Forgery', '0', 39),
  (195, 'Disallow requests from outside hosts', '0', 40),
  (196, 'Add a secret token to all form submissions', '1', 40),
  (197, 'Turn off allow_url_fopen in php.ini', '0', 40),
  (198, 'Filter all output', '0', 40),
  (199, 'Filter all input', '0', 40),
  (200, 'Session Fixation is not possible with this code snippet', '0', 41),
  (201, 'http://www.zend.com/?PHPSESSID=123', '1', 41),
  (202, 'PHPSESSID%611243', '0', 41),
  (203, 'Set-Cookie%3A+PHPSESSID%611234', '0', 41),
  (204, 'http%3A%2F%2Fwww.zend.com%2F%0D%0ASet-Cookie%3A+PHPSESSID%611234', '0', 41),
  (205, 'None of the above', '0', 42),
  (206, 'You should not implement permission systems using sessions', '0', 42),
  (207, 'Sessions should be cleared of all data and re-populated', '0', 42),
  (208, 'The session key should be regenerated', '1', 42),
  (209, 'The session should be destroyed', '0', 42),
  (210, '$a[] = "value";', '0', 43),
  (211, '$a{} = "value";', '1', 43),
  (212, '$a[0] = "value";', '0', 43),
  (213, '$a{0} = "value";', '0', 43),
  (214, '$a[$b = 0] = "value";', '0', 43),
  (215, 'asort()', '1', 44),
  (216, 'usort()', '0', 44),
  (217, 'krsort()', '0', 44),
  (218, 'ksort()', '0', 44),
  (219, 'sort()', '0', 44),
  (220, 'THE QUICK BROWN FOX JUMPED OVER THE LAZY DOG.', '1', 45),
  (221, 'A PHP Error', '0', 45),
  (222, 'Array Array Array Array Array Array Array Array Array', '0', 45),
  (223, 'As a list', '0', 46),
  (224, 'All of these uses are valid', '1', 46),
  (225, 'As a Lookup Table', '0', 46),
  (226, 'A Stack', '0', 46),
  (227, 'As a hash table', '0', 46),
  (228, 'An empty array', '0', 47),
  (229, '0.001 => \'b\', .1 => c', '0', 47),
  (230, '0 => \'c\'', '1', 47),
  (231, '\'0.001\' => \'b\', \'0.1\' => c\'', '0', 47),
  (232, 'A Syntax Error', '0', 47),
  (233, 'array_split()', '0', 48),
  (234, 'split()', '1', 48),
  (235, 'string_split()', '0', 48),
  (236, 'preg_match_all()', '1', 48),
  (237, 'explode()', '1', 48),
  (238, '$str = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";', '1', 49),
  (239, 'range(\'A\', \'Z\');', '1', 49),
  (240, 'explode("", "ABCDEFGHIJKLMNOPQRSTUVWXYZ");', '1', 49),
  (241, 'You would use the ALPHA_ARRAY constant', '0', 49),
  (242, 'None of the above', '0', 49),
  (243, '1 => 1, 2 => 2, 3 => x, 4=> 4', '0', 50),
  (244, '0 => 1, 2 => 2, 3 => 3, 4 => 4, x => 3', '0', 50),
  (245, '0 => 0, 1=> 2, 2 => 3, 3 => x, 4 => 4', '1', 50),
  (246, '0 => x, 1 => 0, 2 => 1, 3=> 2, 4=>3', '0', 50),
  (247, '1 => 1, 3 => x, 2 => 2, 4 => 4', '0', 50),
  (248, 'array_shift()', '0', 51),
  (249, 'array_push();', '0', 51),
  (250, '$array[0] = "value";', '0', 51),
  (251, 'array_unshift()', '1', 51),
  (252, 'array_pop();', '0', 51),
  (253, 'd', '0', 52),
  (254, 'c', '1', 52),
  (255, 'b', '0', 52),
  (256, 'a', '0', 52),
  (257, 'They all will be displayed', '0', 52),
  (258, '$array_three = array_merge(array_reverse($array_one), $array_two);', '0', 54),
  (259, '$array_three = array_combine($array_one, $array_two);', '0', 54),
  (260, '$array_three = array_combine(array_reverse($array_one), $array_two);', '1', 54),
  (261, '$array_three = array_merge($array_one, $array_two);', '0', 54),
  (262, '$array_three = array_reverse($array_one) + $array_two;', '0', 54),
  (263, 'key', '1', 55),
  (264, 'forward', '0', 55),
  (265, 'prev', '1', 55),
  (266, 'current', '1', 55),
  (267, 'next', '1', 55),
  (268, 'Smith', '1', 53),
  (269, 'A PHP Warning', '0', 53),
  (270, 'Coggeshall', '0', 53),
  (271, 'NULL', '0', 53),
  (272, 'Array', '0', 53),
  (273, 'array_total_values', '0', 56),
  (274, ' array_count_values', '1', 56),
  (275, 'A foreach loop', '0', 56),
  (276, 'count', '0', 56),
  (277, 'a for loop', '0', 56),
  (278, 'array_get_variables', '0', 57),
  (279, 'current', '0', 57),
  (280, 'each', '0', 57),
  (281, 'import_variables', '0', 57),
  (282, 'list', '1', 57),
  (283, '1 => 0', '0', 58),
  (284, '1 => 3, 3 => 1, 4 => 3', '0', 58),
  (285, '3 => 1, 3=> 2, 4 => 3, 4=> 6', '0', 58),
  (286, '1 => 0, 3 => 2, 4 => 6', '0', 58),
  (287, 'An empty Array', '1', 58),
  (288, '$a = "Value: $value->getValue()";', '1', 59),
  (289, '$a = "Value: {$value}";', '0', 59),
  (290, '$a = \'Value: $value\';', '1', 59),
  (291, '$a = "Value: $value";', '0', 59),
  (292, '$a = "Value: {$value[\'val\']}";', '0', 59),
  (293, '$msg{$i}', '1', 60),
  (294, 'ord($msg);', '0', 60),
  (295, 'chr($msg);', '0', 60),
  (296, 'substr($msg, $i, 2);', '0', 60),
  (297, 'None of the above', '0', 61),
  (298, 'implode("", array($var1,$var2));', '1', 61),
  (299, '$var1 . $var2', '1', 61),
  (300, '$var1 + $var2', '0', 61),
  (301, 'All of the above', '0', 61),
  (302, 'strstr($var, strpos($var, "."));', '0', 62),
  (303, 'substr($var, strpos($var, "@"));', '0', 62),
  (304, 'substr($var, strstr($var, "."));', '0', 62),
  (305, 'substr($var, strpos($var, ".") + 1);', '0', 62),
  (306, 'substr($var, strpos($var, "."));', '1', 62),
  (307, '$a === $b;', '1', 63),
  (308, 'strcasecmp($a, $b);', '1', 63),
  (309, 'strcmp($a, $b);', '1', 63),
  (310, ' $a == $b;', '1', 63),
  (311, 'str_compare($a,$b);', '0', 63),
  (312, 'md5()', '1', 64),
  (313, 'hash()', '0', 64),
  (314, 'fingerprint()', '0', 64),
  (315, 'None of the above', '0', 64),
  (316, 'They all are equally proper methods', '0', 65),
  (317, 'str_split($string, strpos($string, "-=-"))', '0', 65),
  (318, 'preg_split("-=-", $string);', '1', 65),
  (319, 'explode("-=-" $string);', '0', 65),
  (320, '14304', '0', 66),
  (321, '14342', '1', 66),
  (322, '44302', '0', 66),
  (323, '14402', '0', 66),
  (324, 'Array', '0', 66),
  (325, '\'t\' == t', '1', 67),
  (326, '1 === "1time"', '0', 67),
  (327, '"top" == 0', '1', 67),
  (328, '"top" === 0', '0', 67),
  (329, '1 == "1time"', '1', 67),
  (330, 'strip_markup', '0', 68),
  (331, 'strip_tags', '1', 68),
  (332, 'str_replace', '0', 68),
  (333, 'preg_replace', '0', 68),
  (334, 'preg_strip', '0', 68),
  (335, 'Both strcmp() and $a === $b', '1', 69),
  (336, '$a == $b', '0', 69),
  (337, '$a === $b', '0', 69),
  (338, 'str_compare()', '0', 69),
  (339, 'strstr()', '0', 69),
  (340, 'str_format($string, $apples, $oranges);', '0', 70),
  (341, 'print($string, $apples, $oranges);', '0', 70),
  (342, 'printf($string, $apples, $oranges);', '1', 70),
  (343, 'print sprintf($apples, $oranges);', '0', 70),
  (344, 'sprintf($string, $oranges, $apples);', '0', 70),
  (345, 'No, the htmlentities() call will translate quotes while the htmlspecialchars() call will not', '0', 71),
  (346, 'No, htmlentites() translates < and > symbols to their HTML entity equivalents while htmlspecialchars() only does quotes', '0', 71),
  (347, 'No, the htmlentites() call won\'t translate quotes to HTML entities while the htmlspecialchars() call will', '0', 71),
  (348, 'Yes, htmlspecialchars() and htmlentities() with the ENT_QUOTES constants produce the same result', '1', 71),
  (349, 'strsplit($string, "\\t\\n");', '0', 72),
  (350, 'strtok($string, "\\t\\n");', '1', 72),
  (351, 'strstr($string, "\\t\\n");', '0', 72),
  (352, 'explode("\\t\\n", $string);', '0', 72),
  (353, 'All of the above', '0', 72),
  (354, 'mirror()', '0', 73),
  (355, 'strtoupper()', '1', 73),
  (356, 'toupper()', '0', 73),
  (357, 'str_reverse()', '1', 73),
  (358, 'Write a parser completely by hand, it\'s the only way to make sure it\'s 100% accurate', '0', 74),
  (359, 'Use the parse_str() function to translate it to an array()', '1', 74),
  (360, 'Pass the variable to another PHP script via an HTTP GET request and return the array as a serialized variable', '0', 74),
  (361, 'Just call unserialize() to translate it to an array()', '0', 74),
  (362, 'Write a string parser using strtok() and unserialize() to convert it to an array', '0', 74),
  (363, 'None of the above', '0', 75),
  (364, 'Hello34262343goodbye', '0', 75),
  (365, 'frank12345abc', '1', 75),
  (366, 'hello34212343goodbye', '1', 75),
  (367, 'abcdefghi12345abc', '0', 75),
  (368, '/^[hp1-5]*\\-.*/i', '1', 76),
  (369, '/[hp1-5]*\\-.?/', '0', 76),
  (370, '/[hp][1-5]*\\-.*/', '0', 76),
  (371, '/[PhP]{3}[1-5]{2,3}\\-.*$/', '0', 76),
  (372, '/[a-z1-5\\-]*/', '0', 76),
  (373, 'strtok() using regular expressions', '0', 77),
  (374, 'preg_* regular expression functions', '1', 77),
  (375, 'parse_str() using regular expressions', '0', 77),
  (376, 'strregex* regular expression functions', '0', 77),
  (377, 'ereg* regular expression functions', '0', 77),
  (378, 'Unset the variable in $HTTP_SESSION_VARS', '0', 78),
  (379, 'Use the session_destroy() function', '0', 78),
  (380, 'Use the session_unset() function', '0', 78),
  (381, 'unset the variable in $_SESSION using unset()', '1', 78),
  (382, 'Any of the above are acceptable in PHP 5', '0', 78),
  (383, 'It requires a custom PHP extension to change the session handler', '0', 79),
  (384, 'Implement the session_set_save_handler() function', '0', 79),
  (385, 'Create functions for each session handling step and use session_set_save_handler() to override PHP\'s internal settings', '1', 79),
  (386, ' Configure the session.save_handler INI directive to your session class', '0', 79),
  (387, 'Regenerate the session ID using session_regenerate_id()', '0', 80),
  (388, 'If cookies are used, destroy it', '1', 80),
  (389, 'Use session_demolish() to completely destroy the session', '0', 80),
  (390, 'Change the session name using session_name()', '0', 80),
  (391, 'Destroy the session data using session_destroy()', '1', 80),
  (392, 'Set the session.hash_function INI configuration directive', '1', 81),
  (393, 'Use the session_set_id_generator() function', '0', 81),
  (394, 'Set the session id by force using the session_id() function', '0', 81),
  (395, 'Use the session_regenerate_id() function', '0', 81),
  (396, 'Implement a custom session handler', '0', 81),
  (397, 'myselectbox=array()', '0', 82),
  (398, 'myselectbox[]', '1', 82),
  (399, 'myselectbox[\'multiple\']', '0', 82),
  (400, 'myselectbox{\'multiple\'}', '0', 82),
  (401, 'myselectbox', '0', 82),
  (402, 'None of the above', '0', 83),
  (403, '$_FILES[\'fieldname\'][\'tmp_name\']', '1', 83),
  (404, '$_FILES[\'fieldname\']', '0', 83),
  (405, '$_FILES[\'fieldname\'][0][\'filename\']', '0', 83),
  (406, '$_FILES[\'fieldname\'][\'filename\']', '0', 83),
  (407, 'Send a HTTP "Location:" header', '1', 84),
  (408, 'Use the HTML <redirect> Tag', '0', 84),
  (409, 'Send a HTTP "Forward:" header', '0', 84),
  (410, 'Use the redirect() function', '0', 84),
  (411, 'Use the add_cookie() function', '0', 85),
  (412, 'Use the setcookie() function', '1', 85),
  (413, 'Use the the apache_send_header() function', '0', 85),
  (414, 'Setting a variable in the $_COOKIE superglobal', '0', 85),
  (415, 'You cannot create cookies that expire when the browser session is terminated', '0', 86),
  (416, 'Setting the expiration time for a cookie to a time in the distant future', '0', 86),
  (417, 'Do not provide a cookie expiration time', '1', 86),
  (418, 'Enable Cookie Security', '0', 86),
  (419, 'Set a cookie without a domain', '0', 86),
  (420, 'Use the setrawcookie() function', '1', 87),
  (421, 'Set the cookies.urlencode INI directive to false', '0', 87),
  (422, 'Use urldecode() on the return value of setcookie()', '0', 87),
  (423, 'Setting the $no_encode parameter of setcookie() to a boolean \'true\'', '0', 87),
  (424, 'All cookies must be URL encoded', '0', 87),
  (425, 'Parse the HTTP headers manually using http_get_headers()', '0', 88),
  (426, 'Use the get_http_username() and get_http_password() functions', '0', 88),
  (427, 'Use the $_SERVER[\'HTTP_USER\'] and $_SERVER[\'HTTP_PASSWORD\'] variables', '0', 88),
  (428, 'Use the $_SERVER[\'PHP_AUTH_USER\'] and $_SERVER[\'PHP_AUTH_PW\'] variables', '1', 88),
  (429, 'Parse the $_SERVER[\'REQUEST_URI\'] variable', '0', 88),
  (430, '!in_array("Location: $url", headers_list())', '1', 89),
  (431, '!header_exists("Location: $url")', '0', 89),
  (432, '!header_location($url)', '0', 89),
  (433, '$_SERVER[\'HTTP_LOCATION\'] != $url', '0', 89),
  (434, 'Enable header buffering in PHP 5', '0', 90),
  (435, 'Set the header.force INI directive to true', '0', 90),
  (436, 'Enable output buffering in PHP 5', '1', 90),
  (437, 'There is no way to ensure that headers can always be set, they must always be checked', '0', 90),
  (438, 'None of the above', '0', 90),
  (439, 'Only under extremely controlled situations', '0', 91),
  (440, 'When the cookie is sent over a secure HTTP request', '0', 91),
  (441, 'When it is encrypted', '1', 91),
  (442, 'It is always acceptable', '0', 91),
  (443, 'strip_tags()', '1', 92),
  (444, 'tidy_strip_html()', '0', 92),
  (445, 'str_replace()', '0', 92),
  (446, 'strip_html()', '0', 92),
  (447, 'No, HTML does not pose any security risks', '0', 93),
  (448, 'Yes, even a <p> HTML tag is a security risk', '0', 93),
  (449, 'Yes, attributes of allowed tags are ignored', '1', 93),
  (450, 'No, strip_tags will prevent any markup-based attack', '0', 93),
  (451, 'None of the above', '0', 94),
  (452, '$username = "foobar\\\' WHERE username=\'admin\'";', '0', 94),
  (453, '$password = "foobar\' WHERE username=\'admin\' --:";', '1', 94),
  (454, '$password = "\\"foobar\\" WHERE username=\\"admin\\"";', '0', 94),
  (455, 'All of the above', '0', 95),
  (456, 'Prepared Statements', '1', 95),
  (457, 'Persistent Connections', '0', 95),
  (458, 'Unbuffered Queries', '0', 95),
  (459, 'Query escaping', '0', 95),
  (460, 'Outside of the Document Root', '1', 96),
  (461, 'In the document root', '0', 96),
  (462, 'Anywhere you want', '0', 96),
  (463, 'In the database', '0', 96),
  (464, 'Remove all quote characters from variables used in a shell execution', '0', 97),
  (465, 'Avoid using shell commands when PHP equivlents are available', '1', 97),
  (466, 'Hard code all shell commands', '1', 97),
  (467, 'Escape all shell arguments', '1', 97),
  (468, 'Escape all shell commands executed', '0', 97),
  (469, 'Error messages will contain sensitive session information', '0', 98),
  (470, 'Error messages can contain cross site scripting attacks', '0', 98),
  (471, 'Security risks involved in logging are handled by PHP', '0', 98),
  (472, 'Error messages give the perception of insecurity to the user', '1', 98),
  (473, 'Error messages can contain data useful to a potential attacker', '1', 98),
  (474, 'View', '1', 99),
  (475, 'Controller', '1', 99),
  (476, 'Validation', '0', 99),
  (477, 'Model', '1', 99),
  (478, 'Front Controller', '0', 99),
  (479, 'Model', '1', 100),
  (480, 'Schema', '0', 100),
  (481, 'Validation', '0', 100),
  (482, 'Controller', '0', 100),
  (483, 'View', '0', 100),
  (484, 'Maintainability', '1', 101),
  (485, 'Execution Speed', '0', 101),
  (486, 'Encapsulation', '1', 101),
  (487, 'Code Reuse', '1', 101),
  (488, 'Iterators', '0', 102),
  (489, 'PDO', '0', 102),
  (490, 'Classes', '0', 102),
  (491, 'PHP', '1', 102),
  (492, 'Smarty', '1', 102),
  (493, 'tidy', '0', 103),
  (494, 'mysql', '0', 103),
  (495, 'w32api', '1', 103),
  (496, 'curl', '0', 103),
  (497, 'dio', '1', 103),
  (498, 'array_intersect_key()', '1', 104),
  (499, 'array_unshift()', '0', 104),
  (500, 'array_diff_key()', '1', 104),
  (501, 'array_merge()', '0', 104),
  (502, 'array_slice()', '0', 104),
  (503, 'array(\'a\', \'a\', \'b\')', '0', 105),
  (504, 'array(\'a\', \'b\', \'c\')', '1', 105),
  (505, 'array(\'c\', \'b\', \'a\')', '0', 105),
  (506, 'array(\'c\', \'c\', \'c\')', '1', 105),
  (507, 'array(\'b\', \'b\', \'b\')', '0', 105),
  (508, 'None of the above', '1', 106),
  (509, 'This could would cause an automatic segmentation fault in PHP 4', '0', 106),
  (510, 'This code would throw a syntax error in PHP 4', '0', 106),
  (511, 'Returning an undefined variable by reference in PHP 4 would cause eventual memory corruption', '0', 106),
  (512, 'You could not return undefined variables by reference in PHP 4', '0', 106),
  (513, 'Access modifiers should be added to methods', '1', 107),
  (514, 'The Constructors for the objects should both be renamed to __construct', '1', 107),
  (515, 'The use of the parent keyword has changed to \'super\'', '0', 107),
  (516, 'Constructors must have the same parameter lists', '0', 107),
  (517, '$c = ((MyClass)$a->getInstance())->doSomething();', '0', 108),
  (518, 'This cannot be re-written in PHP 5', '0', 108),
  (519, '$c = $a->getInstance()->doSomething();', '1', 108),
  (520, '$c = (MyClass)$a->getInstance();', '0', 108),
  (521, '$c = (new MyClass())->getInstance()->doSomething();', '1', 108),
  (522, 'if(get_class($myObj) === "MyObject)', '0', 109),
  (523, 'if(strtolower(get_class($myObj)) == "MyClass")', '0', 109),
  (524, 'if($myObj implements MyClass)', '0', 109),
  (525, 'if($myObj instanceof Object)', '0', 109),
  (526, 'if($myObj instanceof MyClass)', '1', 109),
  (527, 'Both', '0', 110),
  (528, 'PHP 5', '1', 110),
  (529, 'PHP 4', '0', 110),
  (530, 'textual', '1', 111),
  (531, 'unicode', '0', 111),
  (532, 'numeric', '1', 111),
  (533, 'binary', '0', 111),
  (534, 'constant', '0', 111),
  (535, 'PRAGMA locking_mode = "Row";', '0', 112),
  (536, 'PRAGMA count_changes = Off;', '1', 112),
  (537, 'PRAGMA default_synchronous = Off;', '1', 112),
  (538, 'PRAGMA default_synchronous = On;', '0', 112),
  (539, 'PRAGMA locking_mode = "Table";', '0', 112),
  (540, 'mysqli_connect_error();', '1', 113),
  (541, 'mysqli_connect_error($link);', '0', 113),
  (542, 'mysqli_error();', '1', 113),
  (543, '$_MySQL[\'connect_error\']', '0', 113),
  (544, 'mysqli_get_connect_error();', '0', 113),
  (545, 'A transaction must be begun and the variables must be assigned', '0', 114),
  (546, 'Each value must be assigned prior to calling mysqli_bind_param(), and thus nothing should be done', '0', 114),
  (547, 'Use mysqli_bind_value() to assign each of the values', '0', 114),
  (548, 'Assign $myinteger, $mydouble, $myblob, $myvarchar the proper values', '1', 114),
  (549, 'None of the above', '0', 115),
  (550, 'mysqli_fetch_columns($first, $last, $phone);', '0', 115),
  (551, 'mysqli_stmt_bind_result($statement, $first, $last, $phone);', '0', 115),
  (552, 'A while loop, fetching the row and assigning $first, $last, and $phone the proper value', '1', 115),
  (553, 'Updating a single row in a table', '0', 116),
  (554, 'Inserting a new row into a single table', '0', 116),
  (555, 'Performing a stored procedure', '0', 116),
  (556, 'Selecting rows from multiple different tables', '0', 116),
  (557, 'Updating a single row in multiple different tables', '1', 116),
  (558, 'SAX', '1', 117),
  (559, 'FastDOM', '0', 117),
  (560, 'DOM', '1', 117),
  (561, 'XPath', '1', 117),
  (562, 'XML to Object mapping', '1', 117),
  (563, 'All of the above are valid', '1', 118),
  (564, 'mysql:unix_socket=/tmp/mysql.sock;dbname=testdb', '0', 118),
  (565, 'oci:dbname=//localhost:1521/mydb', '0', 118),
  (566, 'mysql:host=localhost;port=3307;dbname=testdb', '0', 118),
  (567, 'sqlite2:/opt/databases/mydb.sq2', '0', 118),
  (568, 'wrap the PDO DSN in a try/catch block to catch any connection exception', '1', 119),
  (569, 'Use constants in the PDO DSN', '0', 119),
  (570, 'Place the login credentials in the php.ini file', '0', 119),
  (571, 'Disable E_STRICT and E_NOTICE error reporting levels', '0', 119),
  (572, '$dbh->commit();', '1', 120),
  (573, '$stmt->execute();', '1', 120),
  (574, '$dbh->rollback();', '1', 120),
  (575, '$dbh->query($stmt);', '0', 120),
  (576, 'Extending the PDOStatement Class', '1', 121),
  (577, 'Set the PDO::ATTR_STATEMENT_CLASS parameter', '1', 121),
  (578, 'Call the PDO::setStatementClass() method', '0', 121),
  (579, 'Extend the PDO class', '1', 121),
  (580, 'Set the PDO::ATTR_USE_CLASS paramater', '0', 121),
  (581, 'Disabling of the short_tags PHP.ini directive', '1', 122),
  (582, 'Enabling the asp_tags PHP.ini directive', '0', 122),
  (583, 'That you have XPath support enabled in PHP 5', '0', 122),
  (584, 'That your XML documents are well-formed', '0', 122),
  (585, 'None of the above, PHP can be embedded in XML in all cases.', '0', 122),
  (586, 'Validators', '0', 123),
  (587, 'DTD', '1', 123),
  (588, 'Transformations', '0', 123),
  (589, 'Namespaces', '0', 123),
  (590, 'The document is completely valid', '0', 124),
  (591, 'All special XML characters must be represented as entities within the content of a node', '1', 124),
  (592, 'All tags must be closed', '1', 124),
  (593, 'You cannot specify a namespace for the <html> attribute', '0', 124),
  (594, 'The DOCTYPE declaration is malformed', '0', 124),
  (595, 'SAX', '1', 125),
  (596, 'DOM', '0', 125),
  (597, 'XML Object Mapping', '0', 125),
  (598, 'XPath', '0', 125),
  (599, 'XQuery', '0', 125),
  (600, 'xml_set_callback("xml_start_handler");', '1', 126),
  (601, 'xml_set_element_handler($xml, "xml_start_handler", "xml_end_handler");', '0', 126),
  (602, 'xml_node_set_handler("xml_start_handler", "xml_end_handler");', '0', 126),
  (603, 'xml_node_set_handler("xml_start_handler");', '0', 126),
  (604, 'All of the above', '0', 127),
  (605, 'Faster than DOM methods', '1', 127),
  (606, 'Requires less memory then DOM', '0', 127),
  (607, 'Easier to develop parsers', '0', 127),
  (608, 'Displays the content of every <body> node', '0', 128),
  (609, 'Displays the "background" attribute for the first node in the XML document named "body"', '1', 128),
  (610, 'Displays the content of every node that has a "background" node', '0', 128),
  (611, 'Displays the "background" attribute of every node named "body"', '0', 128),
  (612, 'XQuery', '0', 129),
  (613, 'XPath', '0', 129),
  (614, 'SimpleXML', '1', 129),
  (615, 'DOM', '1', 129),
  (616, 'SAX', '0', 129),
  (617, '"*[local-name()=\'body\']"', '0', 130),
  (618, '"/body[0]/text"', '0', 130),
  (619, '"/body/body[0]"', '0', 130),
  (620, '"name=\'body\'"', '0', 130),
  (621, '"*[lname()=\'body\']"', '1', 130),
  (622, '$dom->createTextNode("Hello, World");', '0', 131),
  (623, '$dom->appendElement($title, "text", "Hello, world!");', '0', 131),
  (624, '$dom->appendTextNode($title, "Hello, World!");', '0', 131),
  (625, '$dom->createElement(\'text\', "Hello, World");', '0', 131),
  (626, 'None of the above', '1', 131),
  (627, 'Element namespaces are denoted by the \'namespace\' attribute', '0', 132),
  (628, 'converting an element to a string denotes text data', '1', 132),
  (629, 'Non-numeric indexes are element attributes', '1', 132),
  (630, 'Numeric indexes are elements', '1', 132),
  (631, 'Properties denote element iterators', '1', 132),
  (632, 'A String', '1', 133),
  (633, 'An array', '0', 133),
  (634, 'A DomDocument object', '1', 133),
  (635, 'A URI', '1', 133),
  (636, 'A Database resource', '0', 133),
  (637, '$sxe->body->p[0]->a[1][\'href\']', '0', 134),
  (638, '$sxe->body->p->a->href', '0', 134),
  (639, '$sxe->body->p->a[\'href\']', '1', 134),
  (640, '$sxe[\'body\'][\'p\'][0][\'a\'][\'href\']', '0', 134),
  (641, '$sxe->body->p[1]->a[\'href\']', '0', 134),
  (642, 'trim(($p[1]));', '1', 135),
  (643, 'trim(strip_tags(($p->asText())));', '0', 135),
  (644, 'trim(strip_tags(($p->asXML())));', '0', 135),
  (645, 'trim(($p->asXML()));', '0', 135),
  (646, 'strip_tags(($p->asXML()));', '0', 135),
  (647, 'None of the above', '0', 136),
  (648, 'A fragment of a complete SOAP request', '0', 136),
  (649, 'XML-RPC', '1', 136),
  (650, 'REST', '0', 136),
  (651, 'SOAP', '0', 136),
  (652, 'rewind()', '1', 137),
  (653, 'valid()', '1', 137),
  (654, 'next()', '1', 137),
  (655, 'key()', '1', 137),
  (656, 'current()', '1', 137),
  (657, 'prev()', '0', 137),
  (658, 'fetchColumn()', '1', 139),
  (659, 'fetchObject()', '1', 139),
  (660, 'fetch()', '1', 139),
  (661, 'fetchClass()', '0', 139),
  (662, 'fetchRow()', '0', 139),
  (663, 'None of the above', '0', 138),
  (664, 'The XML of each \'title\' node', '0', 138),
  (665, 'The XML of each \'item\' node', '0', 138),
  (666, '"Title" for every title node in the document', '1', 138),
  (667, 'The contents of every \'title\' node which exists under an \'item\' node', '0', 138),
  (668, 'Performance first, maintainability second', '0', 140),
  (669, 'Maintainability first, performance second', '1', 140),
  (670, 'Maintainability', '0', 140),
  (671, 'Performance', '0', 140),
  (672, 'None of the above', '0', 141),
  (673, 'Ensuring that all columns are of a particular case when fetched', '1', 141),
  (674, 'Adjusting the case of a query before it is processed for compatibility reasons', '0', 141),
  (675, 'Controls the switch logic of how queries are processed', '0', 141),
  (676, 'Allows you to adjust the memory cache (or "case") for increased performance', '0', 141),
  (677, '$info[1] is the database-specific error code', '1', 142),
  (678, '$info[2] is the database-specific error message', '1', 142),
  (679, '$info[1] is the unified error code', '0', 142),
  (680, '$info[0] is the unified error code', '1', 142),
  (681, '$info[0] Is the Database-specific error message', '0', 142),
  (682, 'get_backtrace()', '0', 143),
  (683, 'get_function_stack()', '0', 143),
  (684, 'debug_backtrace()', '1', 143),
  (685, 'debug_print_backtrace()', '1', 143),
  (686, 'print_backtrace()', '0', 143),
  (687, 'Moving all database credentials into a single file', '0', 144),
  (688, 'Moving all database credentials outside of the document root', '1', 144),
  (689, 'Restricting access to files not designed to be executed independently', '1', 144),
  (690, 'Setting creditial information as system environment variables', '0', 144),
  (691, 'Using PHP constants instead of variables to store credentials', '1', 144),
  (692, 'Sessions on shared hosts are easily hijacked by outside malicious users', '0', 145),
  (693, 'All of the above', '0', 145),
  (694, 'You cannot use a custom data store in shared hosts', '0', 145),
  (695, 'Session data stored in the file system can be read by other scripts on the same shared host', '1', 145),
  (696, 'Users outside the shared host can access any site which created a session for them', '0', 145),
  (697, 'Switch', '1', 146),
  (698, 'Conditional', '0', 146),
  (699, 'Goto', '1', 146),
  (700, 'Call', '1', 146),
  (701, 'Dynamic', '0', 146),
  (702, 'They are always seekable', '1', 147),
  (703, 'When used properly they significantly reduce memory consumption', '0', 147),
  (704, 'They can be applied to any data source', '0', 147),
  (705, 'They are always bi-directional', '1', 147),
  (706, 'They can be filtered', '0', 147),
  (707, 'When running in a Linux environment local filesystem', '0', 148),
  (708, 'When accessing the stream of the local filesystem', '1', 148),
  (709, 'When running in a Windows environment and accessing a share', '0', 148),
  (710, 'When accessing a bi-directional stream', '0', 148),
  (711, 'When accessing a read-only stream', '0', 148),
  (712, 'The request is blocking and may cause fread() to hang', '0', 149),
  (713, 'The HTTP request is malformed', '1', 149),
  (714, 'This script should be re-written using fgets() instead of fread()', '0', 149),
  (715, 'The request is non-blocking and fread() may miss the response', '0', 149),
  (716, 'You cannot use fwrite() with fsockopen()', '0', 149),
  (717, 'Buffered', '0', 150),
  (718, 'Buckets', '0', 150),
  (719, 'Wrappers', '1', 150),
  (720, 'Filters', '0', 150),
  (721, 'b', '1', 151),
  (722, 'x', '0', 151),
  (723, 'a', '0', 151),
  (724, 'w', '0', 151),
  (725, 'r+', '0', 151),
  (726, 'STDIN', '1', 152),
  (727, '__STDIN__', '0', 152),
  (728, 'STDIO', '0', 152),
  (729, 'PHP::STDIO', '0', 152),
  (730, 'STD_IN', '0', 152),
  (731, 'gzip://foo.gz?level=9', '0', 153),
  (732, 'compress.zip://foo.gz?level=9', '0', 153),
  (733, 'compress.zlib://foo.gz', '1', 153),
  (734, 'compress.gzip://foo.gz?level=9', '0', 153),
  (735, 'zlib://foo.gz', '0', 153),
  (736, 'ftps://', '0', 154),
  (737, 'ftp://', '0', 154),
  (738, 'sftp://', '1', 154),
  (739, 'https://', '0', 154),
  (740, 'http://', '0', 154),
  (741, 'Provide a context for fopen() using stream_context_create()', '1', 155),
  (742, 'You must delete the file first before uploading a new file', '0', 155),
  (743, 'Configure this behavior in the php.ini file using the ftp.overwrite directive', '0', 155),
  (744, 'Open the file using the \'w+\' mode', '0', 155),
  (745, 'stream_get_blocking', '0', 156),
  (746, 'stream_get_meta_data', '1', 156),
  (747, 'stream_is_blocking', '0', 156),
  (748, 'stream_get_blocking_mode', '0', 156),
  (749, 'Require constructs can\'t be used with URL filenames', '0', 157),
  (750, 'Include constructs cause a fatal error if the file doesn\'t exist', '0', 157),
  (751, 'There is no difference other than the name', '0', 157),
  (752, 'Include constructs are processed at run time; require constructs are processed at compile time', '0', 157),
  (753, 'Require constructs cause a fatal error if the file can\'t be read', '1', 157),
  (754, 'Use stdin(), stdout() and stderr() functions', '0', 158),
  (755, 'PHP::STDIN, PHP::STDOUT, PHP::STDERR class constants in PHP 5', '0', 158),
  (756, 'STDIN, STDOUT, and STDERR constants in PHP 5', '1', 158),
  (757, 'use the php::stdin(), php::stdout(), and php::stderr() class methods', '0', 158),
  (758, 'Use flock_lazy() instead of flock()', '0', 159),
  (759, 'Use LOCK_UN instead of LOCK_EX', '1', 159),
  (760, 'Check the value of $retval to see if the lock was obtained', '0', 159),
  (761, 'Check to see if $retval == LOCK_WAIT', '0', 159),
  (762, '2', '0', 160),
  (763, '4', '0', 160),
  (764, '5', '0', 160),
  (765, '10', '1', 160),
  (766, '$argv[3];', '0', 161),
  (767, '$argv[2];', '0', 161),
  (768, 'func_get_args(3);', '0', 161),
  (769, 'func_get_arg(2);', '1', 161),
  (770, 'func_get_arg(3);', '0', 161),
  (771, '16', '0', 162),
  (772, '51', '1', 162),
  (773, '15', '0', 162),
  (774, '6', '0', 162),
  (775, '5', '0', 162),
  (776, 'Bartlet', '0', 163),
  (777, 'Anjo', '0', 163),
  (778, 'BartletAnjo', '1', 163),
  (779, 'AnjoBartlet', '0', 163),
  (780, 'None / There is an Error', '0', 163),
  (781, 'Always; objects are passed by reference in PHP5', '1', 164),
  (782, 'When the calling code preceeds the variable name with a &', '0', 164),
  (783, 'Never; objects are cloned when passed to a function', '0', 164),
  (784, 'When the function paramater listing preceeds the variable name with a &', '0', 164),
  (785, 'No output or error. Variables can not be optional and passed by reference.', '0', 165),
  (786, '5', '0', 165),
  (787, '6', '1', 165),
  (788, 'Error: Unexpected T_VARIABLE', '1', 166),
  (789, '10', '0', 166),
  (790, 'Notice regarding pass by reference', '0', 166),
  (791, '50', '0', 166),
  (792, '5', '0', 166),
  (793, '...0', '0', 167),
  (794, 'Parse Error: Syntax Error', '1', 167),
  (795, '.....', '0', 167),
  (796, '....', '0', 167),
  (797, '...', '0', 167),
  (798, '##', '0', 168),
  (799, 'Notice', '0', 168),
  (800, 'Warning', '0', 168),
  (801, 'Syntax Error', '0', 168),
  (802, '#', '1', 168),
  (803, '50', '0', 169),
  (804, '5', '0', 169),
  (805, '95', '1', 169),
  (806, '10', '0', 169),
  (807, '100', '0', 169),
  (808, 'I have 6 apples and 6 oranges', '0', 170),
  (809, 'I have 6 apples and 5 oranges', '0', 170),
  (810, 'I have 5 apples and 6 oranges', '1', 170),
  (811, 'I have 5 apples and 5 oranges', '0', 170),
  (812, '0', '1', 171),
  (813, '36', '0', 171),
  (814, '6', '0', 171),
  (815, '30', '0', 171),
  (816, '5', '0', 171),
  (817, 'Dynamic, PHP, Database, HTML', '0', 172),
  (818, 'Embedded, Zend, HTML, XML', '1', 172),
  (819, 'Perl-based, PHP, Web, Static', '0', 172),
  (820, 'Embedded, Zend, Docbook, MySQL', '0', 172),
  (821, 'Zend-based, PHP, Image, HTML', '0', 172),
  (822, '$_10', '0', 173),
  (823, '${“MyVar”}', '0', 173),
  (824, '&$something', '0', 173),
  (825, '$10_somethings', '1', 173),
  (826, '$aVaR', '0', 173),
  (827, 'The value is: Dog', '1', 174),
  (828, 'The value is: Cat', '0', 174),
  (829, 'The value is: Human', '0', 174),
  (830, 'The value is: 10', '0', 174),
  (831, 'Dog', '0', 174),
  (832, 'print() can be used as part of an expression, while echo() can’t', '1', 175),
  (833, 'echo() can be used as part of an expression, while print() can’t', '0', 175),
  (834, 'echo() can be used in the CLI version of PHP, while print() can’t', '0', 175),
  (835, 'print() can be used in the CLI version of PHP, while echo() can’t', '0', 175),
  (836, 'There’s no difference: both functions print out some text!', '0', 175),
  (837, '128', '0', 176),
  (838, '42', '0', 176),
  (839, '242.0', '0', 176),
  (840, '256', '1', 176),
  (841, '342', '0', 176),
  (842, 'False, True, False', '0', 177),
  (843, 'True, True, False', '0', 177),
  (844, 'False, True, True', '0', 177),
  (845, 'False, False, True', '1', 177),
  (846, 'True, True, True', '0', 177),
  (847, 'A string of 50 random characters', '0', 178),
  (848, 'A string of 49 copies of the same character, because the random number generator has not been initialized', '0', 178),
  (849, 'A string of 49 random characters', '1', 178),
  (850, 'Nothing, because $array is not an array', '0', 178),
  (851, 'A string of 49 ‘G’ characters', '0', 178),
  (852, 'function is_leap($year = 2000)', '1', 179),
  (853, 'is_leap($year default 2000)', '0', 179),
  (854, 'function is_leap($year default 2000)', '0', 179),
  (855, 'function is_leap($year)', '0', 179),
  (856, 'function is_leap(2000 = $year)', '0', 179),
  (857, '25', '0', 180),
  (858, '-5', '1', 180),
  (859, '10', '0', 180),
  (860, '5', '0', 180),
  (861, '0', '0', 180),
  (862, 'Group A: 4,3,0,4,9,9 Group B: 7,8', '0', 181),
  (863, 'Group A: 1,3,0,4,9,9 Group B: 7,6', '0', 181),
  (864, 'Group A: 1,3,2,3,0,4 Group B: 5,8', '0', 181),
  (865, 'Group A: 0,4,9,9,9,9 Group B: 7,8', '1', 181),
  (866, 'Group A: 4,3,0,4,9,9 Group B: 7,8', '0', 181),
  (867, 'include_once, include', '0', 182),
  (868, 'require, include', '0', 182),
  (869, 'require_once, include', '0', 182),
  (870, 'include, require', '0', 182),
  (871, 'All of the above are correct', '1', 182),
  (872, '$a *= pow (2, 2);', '1', 183),
  (873, '$a >>= 2;', '0', 183),
  (874, '$a <<= 2;', '1', 183),
  (875, '$a += $a + $a;', '0', 183),
  (876, 'None of the above', '0', 183),
  (877, 'c', '0', 184),
  (878, 'b', '1', 184),
  (879, 'a', '1', 184),
  (880, 'd', '1', 184),
  (881, 'e', '0', 184),
  (882, 'Model-view-controller', '0', 185),
  (883, 'Abstract factory', '0', 185),
  (884, 'Singleton', '1', 185),
  (885, 'Proxy', '0', 185),
  (886, 'State', '0', 185),
  (887, 'By consulting the HTTP_REMOTE_COOKIE header', '0', 186),
  (888, 'It cannot be done', '1', 186),
  (889, 'By setting a different domain when calling setcookie()', '0', 186),
  (890, 'By sending an additional request to the browser', '0', 186),
  (891, 'By using Javascript to send the cookie as part of the URL', '0', 186),
  (892, '$_GET[\'email\']', '0', 187),
  (893, '$_POST[\'email\']', '1', 187),
  (894, '$_SESSION[\'text’]', '0', 187),
  (895, '$_REQUEST[\'email\']', '1', 187),
  (896, '$_POST[\'text\']', '0', 187),
  (897, 'The string will become longer because the angular brackets will be converted to their HTML meta character equivalents', '0', 188),
  (898, 'The string will remain unchanged', '1', 188),
  (899, 'If the string is printed to a browser, the angular brackets will be visible', '0', 188),
  (900, 'If the string is printed to a browser, the angular brackets will not be visible and it will be interpreted as HTML', '1', 188),
  (901, 'The string is destroyed by the call to htmlentities()', '0', 188),
  (902, 'It expires right away', '0', 189),
  (903, 'It never expires', '0', 189),
  (904, 'It is not set', '0', 189),
  (905, 'It expires at the end of the user’s browser session', '1', 189),
  (906, 'It expires only if the script doesn’t create a server-side session', '0', 189),
  (907, 'They are passed in clear text, and the subsequent transaction is encrypted', '0', 190),
  (908, 'They are encrypted', '1', 190),
  (909, 'The URL is left in clear text, while the query string is encrypted', '0', 190),
  (910, 'The URL is encrypted, while the query string is passed in clear text', '0', 190),
  (911, 'To ensure its encryption, the query string is converted into a header and passed along with the POST information', '0', 190),
  (912, 'They are combined in an array and stored in the appropriate superglobal array', '0', 191),
  (913, 'The value of the second element is added to the value of the first in the appropriate superglobal array', '0', 191),
  (914, 'The value of the second element overwrites the value of the first in the appropriate superglobal array', '1', 191),
  (915, 'The second element is automatically renamed', '0', 191),
  (916, 'PHP outputs a warning', '0', 191),
  (917, 'By adding two square brackets ([]) to the name of the cookie', '0', 192),
  (918, 'By using the implode function', '1', 192),
  (919, 'It is not possible to store an array in a cookie due to storage limitations', '0', 192),
  (920, 'By using the serialize function', '0', 192),
  (921, 'By adding the keyword ARRAY to the name of the cookie', '0', 192),
  (922, '12345678910', '0', 193),
  (923, '1234567890', '0', 193),
  (924, '0123456789', '0', 193),
  (925, 'Nothing', '0', 193),
  (926, 'A notice', '1', 193),
  (927, 'The filesystem', '1', 194),
  (928, 'A database', '0', 194),
  (929, 'Virtual memory', '0', 194),
  (930, 'Shared memory', '0', 194),
  (931, 'None of the above', '0', 194),
  (932, 'The browser’s binaries are corrupt', '1', 195),
  (933, 'The client machine’s time zone is not set properly', '0', 195),
  (934, 'The user has a virus-scanning program that is blocking all secure cookies', '0', 195),
  (935, 'The browser is set to refuse all cookies', '0', 195),
  (936, 'The cookie uses characters that are discarded all data from your server', '1', 195),
  (937, 'After exactly 1,440 seconds', '0', 196),
  (938, 'After the number of seconds specified in the session.gc_maxlifetime INI setting', '1', 196),
  (939, 'It will never expire unless it is manually deleted', '0', 196),
  (940, 'It will only expire when the browser is restarted', '0', 196),
  (941, 'None of the above', '0', 196),
  (942, 'Float, string', '0', 197),
  (943, 'Positive number, negative number', '0', 197),
  (944, 'Even number, string', '0', 197),
  (945, 'String, Boolean', '0', 197),
  (946, 'Integer, string', '1', 197),
  (947, 'strip_tags', '0', 198),
  (948, 'nl2br', '1', 198),
  (949, 'htmlspecialchars', '0', 198),
  (950, 'wordwrap', '0', 198),
  (951, 'a+b', '0', 199),
  (952, 'b+a', '1', 199),
  (953, 'at', '0', 199),
  (954, 'w', '0', 199),
  (955, 'x+', '0', 199),
  (956, 'First', '1', 200),
  (957, 'Second', '0', 200),
  (958, 'Third', '0', 200),
  (959, 'This piece of code will not run, but fail with a parse error.', '0', 200),
  (960, 'Calculating the sum of all the values in a column', '0', 201),
  (961, 'Determining the minimum value in a result set', '0', 201),
  (962, 'Grouping the results of a query by one or more fields', '1', 201),
  (963, 'Calculating the sum of all values in a column and retrieving all the values of another column that is not part of an aggregate function or GROUP BY clause', '1', 201),
  (964, 'Determining the mean average of a column in a group of rows', '0', 201),
  (965, 'ksort', '0', 202),
  (966, 'array_multisort', '1', 202),
  (967, 'sort', '0', 202),
  (968, 'usort', '0', 202),
  (969, 'PHP will delete the associated session file when session_destroy() is called from within a script', '0', 203),
  (970, 'When the function session_cleanup() is called, PHP will iterate over all session files, and delete them if they exceeded the session timeout limit', '0', 203),
  (971, 'When the function session_start() is called, PHP will iterate over all session files, and delete them if they exceeded the session timeout limit', '0', 203),
  (972, 'When the function session_start() is called, PHP will sometimes iterate over all session files, and delete them if they exceeded the session timeout limit', '1', 203),
  (973, 'Session files are never removed from the filesystem, you need to use an automated script (such as a cronjob) to do this', '0', 203),
  (974, 'subject, to address, extra headers, body', '0', 204),
  (975, 'to address, subject, extra headers, body', '0', 204),
  (976, 'to address, subject, body, extra headers', '1', 204),
  (977, 'subject, to address, body, extra headers', '0', 204),
  (978, 'sprintf() does not output the generated string.', '0', 205),
  (979, 'printf("%2s%1s","ab","c") outputs the string abc', '1', 205),
  (980, 'vprintf() takes at least one parameter; the first parameter is the formatting string and the following parameters are the arguments for the \'%\' placeholders', '0', 205),
  (981, 'printf("%c","64") will output @ and not 6', '1', 205),
  (982, 'sprintf("%3.4f", $x) outputs more than 7 characters', '0', 205),
  (983, 'number_format() inserts thousands of separators and decimal points different from (,) and (.) respectively, while printf() like functions always use (.) as decimal point', '1', 205),
  (984, 'xml_parse_into_struct()', '0', 206),
  (985, 'xml_parser_create_ns()', '0', 206),
  (986, 'xml_set_object()', '0', 206),
  (987, 'xml_set_element_handler()', '1', 206),
  (988, 'mysql_real_escape_string()', '0', 207),
  (989, 'escapeshellcmd()', '1', 207),
  (990, 'regenerateid()', '0', 207),
  (991, 'escapeshellarg()', '1', 207),
  (992, 'When you want to restore a previously defined exception handler function', '0', 208),
  (993, 'When the try/catch block is unable to catch an exception', '1', 208),
  (994, 'When you want to set a user-defined function to handle errors', '0', 208),
  (995, 'When you want to generate a user-level error/warning/notice message', '0', 208),
  (996, 'Land attack', '0', 209),
  (997, 'Replay attack', '0', 209),
  (998, 'Dictionary attack', '0', 209),
  (999, 'SQL injection attack', '1', 209),
  (1000, 'The contents of the whole XML document', '0', 210),
  (1001, 'The XML of every tasks and details nodes', '0', 210),
  (1002, 'The contents of every tasks and details nodes', '1', 210),
  (1003, 'The XML of whole XML document', '0', 210),
  (1004, 'It can be used as a countermeasure against a SQL injection attack', '1', 211),
  (1005, 'It escapes all special characters from strings $_POST["name"] and $_POST["password"] except \' and "', '0', 211),
  (1006, 'It escapes all special characters from strings $_POST["name"] and $_POST["password"]', '1', 211),
  (1007, 'It can be used to mitigate a cross site scripting attack', '0', 211),
  (1008, 'asXML()', '0', 212),
  (1009, 'attributes()', '0', 212),
  (1010, 'getName()', '0', 212),
  (1011, 'children()', '1', 212),
  (1012, 'md5()', '1', 213),
  (1013, 'fingerprint()', '0', 213),
  (1014, 'crypt()', '0', 213),
  (1015, 'hash()', '0', 213);
/*!40000 ALTER TABLE `quiz_answers` ENABLE KEYS */;


-- Dumping structure for table quiz.quiz_questions
DROP TABLE IF EXISTS `quiz_questions`;
CREATE TABLE IF NOT EXISTS `quiz_questions` (
  `id` bigint(20) NOT NULL AUTO_INCREMENT,
  `question` text,
  `question_code` text,
  `comment` text,
  `number_correct_answers` bigint(20) DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=214 DEFAULT CHARSET=latin1;

-- Dumping data for table quiz.quiz_questions: ~203 rows (approximately)
DELETE FROM `quiz_questions`;
/*!40000 ALTER TABLE `quiz_questions` DISABLE KEYS */;
INSERT INTO `quiz_questions` (`id`, `question`, `question_code`, `comment`, `number_correct_answers`) VALUES
  (1, 'Which of the following tags are an acceptable way to begin a PHP Code block?', NULL, NULL, 4),
  (2, 'Which of the following are valid PHP variables?', NULL, 'PHP variables cannot start with a number', 4),
  (3, 'What is the best way to iterate and modify every element of an array using PHP 5?', NULL, NULL, 1),
  (4, 'What is the output of the following PHP script?', '<?php\r\n\r\ndefine(\'FOO\', 10);\r\n\r\n$array = array(10 => FOO,\r\n               "FOO" => 20);\r\n\r\nprint $array[$array[FOO]] * $array["FOO"];\r\n\r\n?>', NULL, 1),
  (5, 'What is the output of the following PHP code?', '<?php\r\n\r\n$a = 1;\r\n$b = 2.5;\r\n$c = 0xFF;\r\n\r\n$d = $b + $c;\r\n$e = $d * $b;\r\n$f = ($d + $e) % $a;\r\n\r\nprint ($f + $e);\r\n\r\n?>', NULL, 1),
  (6, 'What combination of boolean values for $a, $b, $c, and $d will result in the variable $number being equal to 3?', '<?php\r\n\r\n$a = null;\r\n$b = null;\r\n$c = null;\r\n$d = null;\r\n\r\nif($a && !$b) {\r\n  if(!!$c && !$d) {\r\n    if($d && ($a || $c)) {\r\n      if(!$d && $b) {\r\n        $number = 1;\r\n      } else {\r\n        $number = 2;\r\n      }\r\n    } else {\r\n      $number = 3;\r\n    }\r\n  } else {\r\n    $number = 4;\r\n  }\r\n} else {\r\n  $number = 5;\r\n}\r\n?>', NULL, 1),
  (7, 'What is the output of the following code?', '<?php\r\n\r\n$string = "111221";\r\n\r\nfor($i = 0; $i < strlen($string); $i++) {\r\n	\r\n	$current = $string[$i];\r\n	$count = 1;\r\n	\r\n	while(isset($string[$i + $count]) && ($string[$i + $count] == $current)) $count++;\r\n	\r\n	$newstring .= "$count{$current}";\r\n	\r\n	$i += $count-1;\r\n}\r\n\r\nprint $newstring;\r\n?>', NULL, 1),
  (8, 'What is the best way to ensure that a user-defined function is always passed an object as its single parameter?', NULL, NULL, 1),
  (9, 'What does the following function do, when passed two integer values for $p and $q?', '<?php\r\nfunction magic($p, $q) {\r\n  return ($q == 0)\r\n    ? $p\r\n    : magic($q, $p % $q);\r\n}\r\n?>', NULL, 1),
  (10, 'The ____ operator is used to test if two values are identical in every way.', NULL, NULL, 1),
  (11, 'What would go in place of ?????? below to make this script execute without a fatal error?', '<?php\r\n\r\n$a = 1;\r\n$b = 0;\r\n\r\n??????\r\n\r\n$c = $a / $b;\r\n?>', NULL, 3),
  (12, 'What is the output of the following?', '<?php\r\n\r\n$a = 010;\r\n$b = 0xA;\r\n$c = 2;\r\n\r\nprint $a + $b + $c;\r\n\r\n?>', NULL, 1),
  (13, 'What is the output of the following?', '<?php\r\n\r\n$a = 20;\r\n\r\nfunction myfunction($b) {\r\n	$a = 30;\r\n	\r\n	global $a, $c;\r\n	return $c = ($b + $a);\r\n}\r\n\r\nprint myfunction(40) + $c;\r\n\r\n?>', NULL, 1),
  (14, 'What would you replace ??????? with, below, to make the string Hello, World! be displayed?', '<?php\r\n\r\nfunction myfunction() {\r\n        ???????\r\n	print $string;\r\n}\r\n\r\nmyfunction("Hello, World!");\r\n\r\n?>', NULL, 1),
  (15, 'What is the output of the following function?', '<?php\r\n\r\nfunction &find_variable(&$one, &$two, &$three) {\r\n	\r\n	if($one > 10 && $one < 20) return $one;\r\n	if($two > 10 && $two < 20) return $two;\r\n	if($three > 10 && $three < 20) return $three;\r\n}\r\n\r\n$one = 2;\r\n$two = 20;\r\n$three = 15;\r\n\r\n$var = &find_variable($one, $two, $three);\r\n\r\n$var++;\r\n\r\nprint "1: $one, 2: $two, 3: $three";\r\n\r\n?>', 'Assinging $var with &, the $three variable returned by the function will be incremented with $var', 1),
  (16, 'For an arbitrary string $mystring, which of the following checks will correctly determine if the string PHP exists within it?', NULL, NULL, 1),
  (17, 'What are the values of $a in $obj_one and $obj_two when this script is executed?', '<?php\r\nclass myClass {\r\n  private $a;\r\n\r\n  public function __construct() {\r\n    $this->a = 10;\r\n  }\r\n\r\n  public function printValue() {\r\n    print "The Value is: {$this->a}\\n";\r\n  }\r\n\r\n  public function changeValue($val, $obj = null) {\r\n    if(is_null($obj)) {\r\n      $this->a = $val;\r\n    } else {\r\n      $obj->a = $val;\r\n    }\r\n  }\r\n\r\n  public function getValue() {\r\n    return $this->a;\r\n  }\r\n}\r\n\r\n$obj_one = new myClass();\r\n$obj_two = new myClass();\r\n\r\n$obj_one->changeValue(20, $obj_two);\r\n$obj_two->changeValue($obj_two->getValue(), $obj_one);\r\n\r\n$obj_two->printValue();\r\n$obj_one->printValue();\r\n\r\n?>', NULL, 1),
  (18, 'What are the three access modifiers that you can use in PHP objects?', NULL, 'Static is used for variables and methods but it\'s not considered an access method. A final class is a class that cannot be extended.', 3),
  (19, 'When checking to see if two variables contain the same instance of an object, which of the following comparisons should be used?', '', NULL, 1),
  (20, 'In PHP 5 you can use the ______ operator to ensure that an object is of a particular type. You can also use _______ in the function declaration.', NULL, NULL, 1),
  (21, 'What is wrong with the following code?', '<?php\r\n\r\nfunction duplicate($obj) {\r\n	$newObj = $obj;\r\n	return $newObj;\r\n}\r\n\r\n$a = new MyClass();\r\n\r\n$a_copy = duplicate($a);\r\n\r\n$a->setValue(10);\r\n$a_copy->setValue(20);\r\n\r\n?>', NULL, 1),
  (22, 'How can you modify the copy of an object during a clone operation?', '', NULL, 1),
  (23, 'What is the primary difference between a method declared as static and a normal method?', NULL, NULL, 1),
  (24, 'What is the output of the following script?', '<?php\r\n\r\nclass ClassOne {\r\n  protected $a = 10;\r\n\r\n  public function changeValue($b) {\r\n    $this->a = $b;\r\n  }\r\n}\r\n\r\nclass ClassTwo extends ClassOne {\r\n\r\n  protected $b = 10;\r\n\r\n  public function changeValue($b) {\r\n    $this->b = 10;\r\n    parent::changeValue($this->a + $this->b);\r\n  }\r\n\r\n  public function displayValues() {\r\n    print "a: {$this->a}, b: {$this->b}\\n";\r\n  }\r\n}\r\n\r\n$obj = new ClassTwo();\r\n\r\n$obj->changeValue(20);\r\n$obj->changeValue(10);\r\n\r\n$obj->displayValues();\r\n\r\n?>', NULL, 1),
  (25, 'The ______ keyword is used to indicate an incomplete class or method, which must be further extended and/or implemented in order to be used.', '', NULL, 1),
  (26, 'To ensure that a given object has a particular set of methods, you must provide a method list in the form of an ________ and then attach it as part of your class using the ________ keyword.', NULL, NULL, 1),
  (27, 'Type-hinting and the instanceof keyword can be used to check what types of things about variables?', NULL, NULL, 3),
  (28, 'In PHP 5\'s object model, a class can have multiple ______ but only a single direct \r\n________.', NULL, NULL, 1),
  (29, 'What three special methods can be used to perform special logic in the event a particular accessed method or member variable is not found?', NULL, NULL, 3),
  (30, 'The _______ method will be called automatically when an object is represented as a string.', NULL, NULL, 1),
  (31, 'When an object is serialized, which method will be called, automatically, providing your object with an opportunity to close any resources or otherwise prepare to be serialized?', NULL, NULL, 1),
  (32, 'What is the output of the following code?', '<?php\r\n\r\nclass MyException extends Exception {}\r\nclass AnotherException extends MyException {}\r\n\r\nclass Foo {\r\n  public function something() {\r\n    throw new AnotherException();\r\n  }\r\n  public function somethingElse() {\r\n    throw new MyException();\r\n  }\r\n}\r\n\r\n$a = new Foo();\r\n\r\ntry {\r\n  try {\r\n    $a->something();	\r\n  } catch(AnotherException $e) {\r\n    $a->somethingElse();	\r\n  } catch(MyException $e) {\r\n    print "Caught Exception";\r\n  }\r\n} catch(Exception $e) {\r\n  print "Didn\'t catch the Exception!";\r\n}\r\n\r\n?>', NULL, 1),
  (33, 'Which two internal PHP interfaces provide functionality which allow you to treat an object like an array?', NULL, NULL, 2),
  (34, 'Which php.ini directive should be disabled to prevent the execution of a remote PHP script via an include or require construct?', NULL, NULL, 1),
  (35, 'When attempting to prevent a cross-site scripting attack, which of the following is most important?', NULL, NULL, 1),
  (36, 'Which of the following php.ini directives should be disabled to improve the outward security of your application?', NULL, NULL, 4),
  (37, 'Which of the following list of potential data sources should be considered trusted?', NULL, NULL, 1),
  (38, 'What is the best way to ensure the distinction between filtered / trusted and unfiltered / untrusted data?', NULL, NULL, 1),
  (39, 'What potential security hole would this code snippet produce?', '<?php\r\nsession_start();\r\n\r\nif(!empty($_REQUEST[\'id\'])\r\n   && !empty($_REQUEST[\'quantity\'])) {\r\n  $id = scrub_id($_REQUEST[\'id\']);\r\n  $quantity = scrub_quantity($_REQUEST[\'quantity\'])\r\n  $_SESSION[\'cart\'][] = array(\'id\' => $id,\r\n                              \'quantity\' => $quantity)\r\n}\r\n\r\n/* .... */\r\n\r\n?>', NULL, 1),
  (40, 'What is the best measure one can take to prevent a cross-site request forgery?', NULL, NULL, 1),
  (41, 'Which of the following values of $_GET[\'url\'] would cause session fixation? Consider the following code:', '<?php\r\nheader("Location: {$_GET[\'url\']}");\r\n?>', NULL, 1),
  (42, 'When implementing a permissions system for your Web site, what should always be done with regards to the session?', NULL, NULL, 1),
  (43, 'Which of the following is not valid syntax for creating a new array key?', NULL, NULL, 1),
  (44, 'Which of the following functions will sort an array in ascending order by value, while preserving key associations?', NULL, NULL, 1),
  (45, 'What is the output of the following code block?', '<?php\r\n\r\n$a = "The quick brown fox jumped over the lazy dog.";\r\n\r\n$b = array_map("strtoupper", explode(" ", $a));\r\n\r\nforeach($b as $value) {\r\n	print "$value ";\r\n}\r\n\r\n?>', NULL, 1),
  (46, 'Which from the following list is not an approrpiate use of an array?', NULL, NULL, 1),
  (47, 'What is the output of this code snippet?', '<?php\r\n\r\n$a = array(0.001 => \'b\', .1 => \'c\');\r\n\r\nprint_r($a);\r\n\r\n?>', NULL, 1),
  (48, 'Which of the following functions could be used to break a string into an array?', NULL, NULL, 3),
  (49, 'If you wanted a variable containing the letters A through Z, that allowed you to access each letter independently, which of the following approaches could you use?', '', NULL, 3),
  (50, 'What is the output of the following code block?', '<?php\r\n\r\n$array = array(1 => 0, 2, 3, 4);\r\n\r\narray_splice($array, 3, count($array), array_merge(array(\'x\'), array_slice($array, 3))); \r\n\r\nprint_r($array);\r\n\r\n?>', NULL, 1),
  (51, 'Which function would you use to add an element to the beginning of an array?', NULL, NULL, 1),
  (52, 'Which key will not be displayed from the following code block?', '<?php\r\n\r\n$array = array(\'a\' => \'John\',\r\n               \'b\' => \'Coggeshall\',\r\n               \'c\' => array(\'d\' => \'John\',\r\n                            \'e\' => \'Smith\'));\r\n                            \r\nfunction display($item, $key) {\r\n	print "$key => $item\\n";\r\n}\r\n\r\narray_walk_recursive($array, "display");\r\n\r\n?>', NULL, 1),
  (53, 'What is the result of the following code snippet?', '<?php\r\n\r\n$array = array(\'a\' => \'John\',\r\n               \'b\' => \'Coggeshall\',\r\n               \'c\' => array(\'d\' => \'John\',\r\n                            \'e\' => \'Smith\'));\r\n                            \r\nfunction something($array) {\r\n	extract($array);\r\n	return $c[\'e\'];\r\n}\r\n\r\nprint something($array);\r\n?>', NULL, 1),
  (54, 'What should go in the missing line ????? below to produce the output shown?', '<?php\r\n$array_one = array(1,2,3,4,5);\r\n$array_two = array(\'A\', \'B\', \'C\', \'D\', \'E\');\r\n\r\n???????\r\n\r\nprint_r($array_three);\r\n?>\r\n\r\nResult:\r\n\r\nArray\r\n(\r\n    [5] => A\r\n    [4] => B\r\n    [3] => C\r\n    [2] => D\r\n    [1] => E\r\n)', NULL, 1),
  (55, 'Which of the following functions are used with the internal array pointer to accomplish an action?', NULL, NULL, 4),
  (56, 'Given the following array:\r\n$array = array(1,1,2,3,4,4,5,6,6,6,6,3,2,2,2);\r\nThe fastest way to determine the total number a particular value appears in the array is to use which function?', NULL, NULL, 1),
  (57, 'The ____ construct is particularly useful to assign your own variable names to values within an array.', NULL, NULL, 1),
  (58, 'The following code snippet displays what for the resultant array?', '<?php\r\n\r\n$a = array(1 => 0, 3 => 2, 4 => 6);\r\n$b = array(3 => 1, 4 => 3, 6 => 4);\r\n\r\nprint_r(array_intersect($a, $b));\r\n?>', NULL, 1),
  (59, 'Which of the following are not valid ways to embed a variable into a string?', NULL, NULL, 2),
  (60, 'What variable reference would go in the spots indcated by ????? in the code segment below?', '<?php\r\n\r\n$msg = "The Quick Brown Foxed Jumped Over the Lazy Dog";\r\n\r\n$state = true;\r\n$retval = "";\r\nfor($i = 0; (isset(??????)); $i++) {\r\n	if($state) {\r\n		$retval .= strtolower(?????);\r\n	} else {\r\n		$retval .= strtoupper(?????);\r\n	}\r\n	\r\n	$state = !$state;\r\n}\r\n\r\nprint $retval;\r\n\r\n?>', NULL, 1),
  (61, 'Given the two values below, which of the following possiblities will print 10 foos20 bars?', '<?php\r\n\r\n$var1 = "10 foos";\r\n$var2 = "20 bars";\r\n\r\nprint ???????;\r\n\r\n?>', NULL, 2),
  (62, 'Given the string:\r\n$var = "john@php.net";\r\nWhich of the following will extract the TLD (top level domain) of ".net" from the string?', NULL, NULL, 1),
  (63, 'When comparing two strings, which of the following is acceptable?', NULL, NULL, 4),
  (64, 'A fingerprint of a string can be determined using which of the following?', NULL, NULL, 1),
  (65, 'Which of the following is the best way to split a string on the "-=-" pattern?', NULL, NULL, 1),
  (66, 'What is the output of the following code?', '<?php\r\n\r\n   $string = "14302";\r\n   \r\n   $string[$string[2]] = "4";\r\n   \r\n   print $string;\r\n   \r\n?>', NULL, 1),
  (67, 'Which of the following comparisons will evaluate to true?', NULL, NULL, 3),
  (68, 'Which function is best suited for removing markup tags from a string?', NULL, NULL, 1),
  (69, 'Identify the best approach to compare to variables in a binary-safe fashion', NULL, NULL, 1),
  (70, 'Consider the following script. What could be placed in place of ?????? to output the string:', '<?php\r\n\r\n$oranges = 10;\r\n$apples = 5;\r\n\r\n$string = "I have %d apples and %d oranges";\r\n\r\n???????\r\n?>', NULL, 1),
  (71, 'Consider the following script. In this script, do the two var_dump() calls produce the same string? Why or Why Not?', '<?php\r\n\r\n$string = "<b>I like \'PHP\' & I think it is \\"cool\\"</b>";\r\n\r\nvar_dump(htmlentities($string, ENT_QUOTES));\r\nvar_dump(print htmlspecialchars($string));\r\n\r\n?>', NULL, 1),
  (72, 'Consider the following String:\r\n$string = "John\\tMark\\nTed\\tLarry";\r\nWhich of the following functions would best parse the string above by the tab (\\t) and newline (\\n) characters?', NULL, NULL, 1),
  (73, 'Which functions would be needed to translate the following string:\r\nI love PHP 5\r\nto the following?\r\n5 PHP EVOL I', NULL, NULL, 2),
  (74, 'What is the best approach for converting this string:\r\n$string = "a=10&b[]=20&c=30&d=40+50";\r\nInto this array?', 'array(4) {\r\n  ["a"]=>\r\n  string(2) "10"\r\n  ["b"]=>\r\n  array(1) {\r\n    [0]=>\r\n    string(2) "20"\r\n  }\r\n  ["c"]=>\r\n  string(2) "30"\r\n  ["d"]=>\r\n  string(5) "40 50"\r\n}', NULL, 1),
  (75, 'Which string does the following PCRE regular expression match?', '$regex = "/^([a-z]{5})[1-5]+([a-z]+)/";', NULL, 2),
  (76, 'Which PCRE regular expression will match the string PhP5-rocks?', NULL, NULL, 1),
  (77, 'If regular expressions must be used, in general which type of regular expression functions available to PHP is preferred for performance reasons?', NULL, NULL, 1),
  (78, 'To destroy one variable within a PHP session you should use which method in PHP 5?', NULL, NULL, 1),
  (79, 'If you would like to store your session in the database, you would do which of the following?', NULL, NULL, 1),
  (80, 'To destroy a PHP session completely, one must which of the following?', NULL, NULL, 2),
  (81, 'If you would like to change the session ID generation function, which of the following is the best approach for PHP 5?', NULL, NULL, 1),
  (82, 'Consider the following HTML fragement. Which of the following name attributes should be used to capture all of the data from the user in PHP?', '<select name="?????" multiple>\r\n<option value="1">Item #1</option>\r\n<!-- ... more options ... -->\r\n</select>', NULL, 1),
  (83, 'When uploading a file using HTTP, which variable can be used to locate the file on PHP\'s local filesystem?', NULL, NULL, 1),
  (84, 'To force a user to redirect to a new URL from within a PHP 5 script, which of the following should be used?', NULL, NULL, 1),
  (85, 'Setting a cookie on the client in PHP 5 can be best accomplished by:', NULL, NULL, 1),
  (86, 'How does one create a cookie which will exist only until the browser session is terminated?', NULL, NULL, 1),
  (87, 'Setting a HTTP cookie on the client which is not URL-encoded is done how in PHP 5?', NULL, NULL, 1),
  (88, 'During an HTTP authentication, how does one determine the username and password provided by the browser?', NULL, NULL, 1),
  (89, 'Consider the following function. What conditional should replace the ????? above?', '<?php\r\nfunction redirect($url) {\r\n  // Check to make sure we haven\'t already sent\r\n  // the header:\r\n\r\n  if(???????) {\r\n    header("Location: $url");\r\n  }\r\n}\r\n?>', NULL, 1),
  (90, 'One can ensure that headers can always be sent from a PHP script by doing what?', NULL, NULL, 1),
  (91, 'When is it acceptable to store sensitive information in an HTTP cookie?', NULL, NULL, 1),
  (92, 'Removing undesired markup tags from input can best be done using which function?', NULL, NULL, 1),
  (93, 'When using a function such as strip_tags, are markup-based attacks still possible?', NULL, NULL, 1),
  (94, 'Consider the following PHP string representing an SQL statement:\r\n$query = "UPDATE users SET password=\'$password\' WHERE username=\'$username\'";\r\nWhich of the following values for $username or $password would change the behavior of this query when executed?', NULL, NULL, 1),
  (95, 'SQL Injections can be best prevented using which of the following database technologies?', NULL, NULL, 1),
  (96, 'Where should indirectly executed PHP scripts (i.e. include files) be stored in the file system?', NULL, NULL, 1),
  (97, 'When executing system commands from PHP, what should one do to keep applications secure?', NULL, NULL, 3),
  (98, 'Why is it important from a security perspective to never display PHP error messages directly to the end user, yet always log them?', NULL, NULL, 2),
  (99, 'The MVC pattern in Web development involves which of the following components?', NULL, NULL, 3),
  (100, 'Which of the following aspects of the MVC pattern is used in conjunction with the database?', NULL, NULL, 1),
  (101, 'What are the primary benefits of object oriented programming?', NULL, NULL, 3),
  (102, 'What consistutes a View in the MVC pattern for PHP 5, in the following list?', NULL, NULL, 2),
  (103, 'Which of the following extensions are no longer part of PHP 5 and have been moved to PECL?', NULL, NULL, 2),
  (104, 'Which of the following functions were added to PHP 5 for dealing with arrays?', NULL, NULL, 2),
  (105, 'Consider the following script; This code has changed behavior in PHP 5. Identify the output of this script as it would have been in PHP 4, as well as the new behavior in PHP 5.\r\n', '<?php\r\nfunction func(&$arraykey) {\r\n  return $arraykey; // function returns by value!\r\n}\r\n\r\n$array = array(\'a\', \'b\', \'c\');\r\nforeach (array_keys($array) as $key) {\r\n  $y = &func($array[$key]);\r\n  $z[] =& $y;\r\n}\r\n\r\nvar_dump($z);\r\n?>', NULL, 2),
  (106, 'Consider the following code block; This code block\'s behavior has changed between PHP 4 and PHP 5. Why?', '<?php\r\nfunction &myFunction() {\r\n  $string = "MyString";\r\n  var_dump($string);\r\n\r\n  return ($undefined);\r\n}\r\n\r\nfor($i = 0; $i < 10; $i++) {\r\n  $retval = myFunction();\r\n}\r\n?>', NULL, 1),
  (107, 'When migrating the following code from PHP 4 to PHP 5, what should be changed?', '<?php\r\n\r\nclass MyClass {\r\n	\r\n	function MyClass($param) {\r\n		/* Do something with $param */\r\n		$this->_doSomething($param);\r\n	}\r\n	\r\n	// Private method to MyClass\r\n	function _doSomething($param) {\r\n		/* Do something with $param */\r\n	}\r\n}\r\n\r\nclass AnotherClass extends MyClass {\r\n	\r\n	var $param = "foo";\r\n	\r\n	function AnotherClass() {\r\n		parent::MyClass($this->param);	\r\n	}\r\n}\r\n\r\n?>', NULL, 1),
  (108, 'Assuming every method call below returns an instance of an object, how can the following be re-written in PHP 5?', '<?php\r\n\r\n$a = new MyClass();\r\n$b = $a->getInstance();\r\n$c = $b->doSomething();\r\n\r\n?>', NULL, 2),
  (109, 'How can the following code be re-written from PHP 4 to PHP 5?', '<?php\r\n\r\nif(get_class($myObj) == "MyClass") {\r\n	// Do something\r\n}\r\n\r\n?>', NULL, 1),
  (110, 'Is this code valid only in PHP 4, in PHP 5, or both?', '<?php\r\n\r\nfunction myfunction(&$myvalue = null) {\r\n    /* ... */\r\n}\r\n\r\n?>', NULL, 1),
  (111, 'Unlike a database such as MySQL, SQLite columns are not explicitly typed. Instead, SQLite catagorizes data into which of the following catagories?', NULL, NULL, 2),
  (112, 'Which of the following SQL statements will improve SQLite write performance?', NULL, NULL, 2),
  (113, 'Consider the following code snippet; What would go in place of the ???? above for this script to function properly?', '<?php\r\n$link = mysqli_connect("hostname", \r\n                       "username",\r\n                       "password");\r\n\r\nif(!$link)\r\n{\r\n  $error = ??????\r\n  die("Could not connect to the database: $error");\r\n}\r\n\r\n?>', NULL, 2),
  (114, 'Consider the following code snippet; Assuming this snippet is a smaller part of a correctly written script, what actions must occur in place of the ????? in the above code snippet to insert a row with the following values: 10, 20.2, foo, string?', '<?php\r\n$query = "INSERT INTO mytable \r\n          (myinteger, mydouble, myblob, myvarchar)\r\n          VALUES (?, ?, ?, ?)";\r\n\r\n$statement = mysqli_prepare($link, $query);\r\n	\r\nif(!$statement)\r\n{\r\n  die(mysqli_error($link));\r\n}\r\n	\r\n/* The variables being bound to by MySQLi\r\n   don\'t need to exist prior to binding */\r\nmysqli_bind_param($statement, "idbs",\r\n  $myinteger, $mydouble, $myblob, $myvarchar);\r\n	\r\n/* ???????????? */ \r\n	\r\n/* execute the query, using the variables as defined. */\r\n	\r\nif(!mysqli_execute($statement))\r\n{\r\n  die(mysqli_error($link));\r\n}\r\n\r\n?>', NULL, 1),
  (115, 'Consider the following code snippet; Assuming this code snippet is part of a larger correct application, what must be done in place of the ???? above for the correct output to be displayed?', '<?php\r\n$query = "SELECT first,\r\n            last,\r\n            phone\r\n          FROM contacts\r\n          WHERE first LIKE \'John%\'";\r\n	\r\n$statement = mysqli_prepare($link, $query);\r\nmysqli_execute($statement);\r\n	\r\n/* ???? */\r\n\r\nwhile(($result = mysqli_stmt_fetch($statement)))\r\n{\r\n  print "Name: $first $last\\n";\r\n  print "Phone: $phone\\n\\n";\r\n}\r\n?>', NULL, 1),
  (116, 'Which of the following cases are cases when you should use transactions?', NULL, NULL, 1),
  (117, 'PHP 5 supports which of the following XML parsing methods?', NULL, NULL, 4),
  (118, 'Which of the following is not a valid PDO DSN?', NULL, NULL, 1),
  (119, 'When connecting to a database using PDO, what must be done to ensure that database credentials are not compromised if the connection were to fail?', NULL, NULL, 1),
  (120, 'Consider the following script; What lines of code need to go into the missing places above in order for this script to function properly and insert the data into the database safely?', '<?php\r\ntry {\r\n  $dbh = new PDO("sqlite::memory:");\r\n} catch(PDOException $e) {\r\n  print $e->getMessage();\r\n}\r\n\r\n$dbh->query("CREATE TABLE foo(id INT)");\r\n$stmt = $dbh->prepare("INSERT INTO foo VALUES(:value)");\r\n$value = null;\r\n$data = array(1,2,3,4,5);\r\n$stmt->bindParam(":value", $value);\r\n\r\n/* ?????? */\r\ntry {\r\n  foreach($data as $value) {\r\n    /* ????? */\r\n  }\r\n} catch(PDOException $e) {\r\n  /* ??????? */\r\n}\r\n\r\n/* ?????? */\r\n?>', NULL, 3),
  (121, 'Implementing your own PDO class requires which steps from the list below?', NULL, NULL, 3),
  (122, 'When embedding PHP into XML documents, what must you ensure is true in order for things to function properly?', NULL, NULL, 1),
  (123, 'What XML technology is used when you mix two different document types in a single XML document?', NULL, '<a href="http://en.wikipedia.org/wiki/Document_type_definition" target="_blank">Document Type Definition</a>', 1),
  (124, 'Consider the following example XML document; What is wrong with this document, and how can it be corrected?', '<?xml version="1.0" encoding="ISO-8859-1" ?>\r\n<!DOCTYPE html\r\n PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"\r\n "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">\r\n<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">\r\n <head>\r\n  <title>XML Example</title>\r\n </head>\r\n <body>\r\n  <p>\r\n   Moved to <<a href="http://example.org/">http://www.example.org/</a>.>\r\n   <br>\r\n  </p>\r\n </body>\r\n</html>', NULL, 2),
  (125, 'Event-based XML parsing is an example of which parsing model?', NULL, NULL, 1),
  (126, ' Consider the following code segment; What should be placed in place of ?????? above to have the above script display the name of each tag within the XML document?', '<?php\r\n$xmldata = <<< XML\r\n<?xml version="1.0" encoding="ISO-8859-1" ?>\r\n<!DOCTYPE html\r\n     PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"\r\n     "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">\r\n<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">\r\n  <head>\r\n    <title>XML Example</title>\r\n  </head>\r\n  <body>\r\n    <p>\r\n      Moved to &lt;<a href="http://example.org/">http://www.example.org/</a>.&gt;\r\n      <br/>\r\n    </p>\r\n  </body>\r\n</html>\r\nXML;\r\n\r\n$xml = xml_parser_create("UTF-8");\r\n\r\n/* ??????? */\r\n\r\nxml_parse($xml, $xmldata);\r\n\r\nfunction xml_start_handler($xml, $tag, $attributes) {\r\n	print "Tag: $tag<br/>\\n";\r\n}\r\n\r\nfunction xml_end_handler($xml, $tag) {\r\n\r\n}\r\n\r\n?>', NULL, 1),
  (127, 'What is the primary benefit of a SAX-based XML parser compared to DOM?', NULL, NULL, 1),
  (128, 'What does the following PHP script accomplish?', '<?php\r\n     $dom = new DomDocument();\r\n     $dom->load(\'test.xml\');\r\n     $body = $dom->documentElement->getElementsByTagName(\'body\')->item(0);\r\n     echo $body->getAttributeNode(\'background\')->value. "\\n";\r\n?>', NULL, 1),
  (129, 'Creating new nodes in XML documents using PHP can be done using which XML/PHP 5 technologies?', NULL, NULL, 2),
  (130, 'Consider the following simple PHP script; What XPath query should go in the ?????? above to display the "bgcolor" attribute of the first "body" node in the XML document?', '<?php\r\n$dom = new DomDocument();\r\n$dom->load(\'test.xml\');\r\n$xpath = new DomXPath($dom);\r\n$nodes = $xpath->query(???????, $dom->documentElement);\r\necho $nodes->item(0)->getAttributeNode(\'bgcolor\')->value\r\n  . "\\n";\r\n?>', NULL, 1),
  (131, 'Consider the following PHP script fragment; What should ??????? be replaced with to add a <title> node with the value of Hello, World!', '<?php\r\n\r\n$dom = new DomDocument();\r\n$title = $dom->createElement(\'title\');\r\n\r\n$node = ????????\r\n\r\n$title->appendChild($node);\r\n$head->appendChild($title);\r\n\r\n?>', NULL, 1),
  (132, 'When working with SimpleXML in PHP 5, the four basic rules on how the XML document is accessed are which of the following?', NULL, NULL, 4),
  (133, 'SimpleXML objects can be created from what types of data sources?', NULL, NULL, 3),
  (134, 'Given the following XML document in a SimpleXML object, select the proper statement below which will display the HREF attribute of the anchor tag.', '<?xml version="1.0" encoding="ISO-8859-1" ?>\r\n<!DOCTYPE html\r\n     PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"\r\n     "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">\r\n<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">\r\n  <head>\r\n    <title>XML Example</title>\r\n  </head>\r\n  <body>\r\n    <p>\r\n      Moved to &lt;<a href="http://example.org/">http://www.example.org/</a>.&gt;\r\n      <br/>\r\n    </p>\r\n  </body>\r\n</html>', NULL, 1),
  (135, 'Given the following PHP script; What should go in place of ????? above to print the string Hello, World! (with no leading/trailing whitespace or markup)?', '<?php \r\n\r\n$xmldata = <<< XML\r\n<?xml version="1.0" encoding="ISO-8859-1" ?>\r\n<!DOCTYPE html\r\n     PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"\r\n     "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">\r\n<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">\r\n  <head>\r\n    <title>XML Example</title>\r\n  </head>\r\n  <body>\r\n    <p>\r\n      <b>Hello, World!</b>\r\n    </p>\r\n  </body>\r\n</html>\r\nXML;\r\n\r\n$sxe = simplexml_load_string($xmldata);\r\n\r\n$p = $sxe->body->p;\r\n\r\n$string = ????????\r\n\r\nprint $string;\r\n?>', NULL, 1),
  (136, 'The following is a common XML structure used in service oriented architectures, what does it represent?', '<?xml version="1.0"?>\r\n<methodCall>\r\n <methodName>myMethod</methodName>\r\n <params>\r\n  <param>\r\n   <value><string>HI!</string></value>\r\n  </param>\r\n </params>\r\n</methodCall>', NULL, 1),
  (137, 'Which of the following functions are part of PHP\'s internal Iterator interface?', NULL, NULL, 5),
  (138, 'Consider the following script; Assuming the referenced XML document exists and matches the parsing logic, what should be displayed when this script is executed?', '<?php\r\n$dom = new DOMDOcument();\r\n$dom->load("myxmlfile.xml");\r\n\r\nforeach($dom->documentElement->childNodes as $child)\r\n{\r\n  if(($child->nodeType == XML_ELEMENT_NODE) &&\r\n      $child->nodeName == "item")\r\n  {\r\n    foreach($child->childNodes as $item)\r\n    {\r\n      if(($item->nodeType == XML_ELEMENT_NODE) &&\r\n         ($item->nodeName == "title"))\r\n      {\r\n        print "$item->firstChild->data\\n";\r\n      }\r\n    }\r\n  }\r\n}\r\n?>', NULL, 1),
  (139, 'Which of the following methods are used to fetch data from a PDO Statement?', NULL, NULL, 3),
  (140, 'In a general sense, which is more important: performance or maintainability of an application?', NULL, NULL, 1),
  (141, 'When writing portable database code using PDO, what is the PDO::ATTR_CASE attribute useful for?', NULL, NULL, 1),
  (142, 'Consider the following PHP code segment, which attempts to execute a PDO query; In the event of a PDOException, $info is set with the contents of the $errorInfo property of the exception. Which of the following are accurate descriptions of the contents?', '<?php\r\ntry {\r\n  $dbh->exec($sql);\r\n} catch (PDOException $e) {\r\n  // display warning message\r\n  $info = $e->errorInfo;\r\n}\r\n?>', NULL, 3),
  (143, 'Which of the following functions allow you to introspect the call stack during execution of a PHP script?', NULL, NULL, 2),
  (144, 'When working with a database, which of the following can be used to mitigate the possibility of exposing your database credientials to a malicious user?', NULL, NULL, 3),
  (145, 'When running PHP in a shared host environment, what is the major security concern when it comes to session data?', NULL, NULL, 1),
  (146, 'Which of the following are examples of the new engine executor models available in PHP 5?', NULL, NULL, 3),
  (147, 'Which of the following are not true about streams?', NULL, NULL, 2),
  (148, 'Using flock() to lock a stream is only assured to work under what circumstances?', NULL, '<a href="http://php.net/manual/en/function.flock.php" target="_blank">http://php.net/manual/en/function.flock.php</a>', 1),
  (149, 'What is wrong with the following code snippet? Assume default configuration values apply.', '<?php\r\n\r\n$fp = fsockopen(\'www.php.net\', 80);\r\nfwrite($fp, "GET / HTTP/1.0\\r\\nHost: www.php.net\\r\\n");\r\n$data = fread($fp, 8192);\r\n\r\n?>', 'Example of a correct request:<br><br>\r\n\r\nPOST /test/index.php HTTP/1.1<br>\r\nHost: mywebsite.com<br>\r\nname1=value1&name2=value2<br>', 1),
  (150, '_______ can be used to add additional functionality to a stream, such as implementation of a specific protocol on top of a normal PHP stream implementation.', NULL, '<a href="http://php.net/manual/en/intro.stream.php" target="_blank">http://php.net/manual/en/intro.stream.php</a>: A wrapper is additional code which tells the stream how to handle specific protocols/encodings', 1),
  (151, 'Which of the following is not a valid fopen() access mode:', NULL, NULL, 1),
  (152, 'The _______ constant in a CLI script is an automatically provided file resource representing standard input of the terminal.', NULL, NULL, 1),
  (153, 'What should go in the ??????? assignment below to create a Zlib-compressed file foo.gz with a compression level of 9?', '<?php\r\n\r\n$file = \'????????\';\r\n\r\n$fr = fopen($file, \'wb9\');\r\nfwrite($fr, $data);\r\nfclose($fr);\r\n\r\n?>', NULL, 1),
  (154, 'Which of the following is not a valid default stream wrapper for PHP 5, assuming OpenSSL is enabled?', NULL, 'http://www.php.net/manual/en/wrappers.ftp.php ', 1),
  (155, 'When opening a file in writing mode using the FTP handler, what must be done so that the file will still be written to the server in the event it previously exists?', NULL, 'http://php.net/manual/en/function.stream-context-create.php', 1),
  (156, 'Which of the following functions is used to determine if a given stream is blocking or not?', NULL, NULL, 1),
  (157, 'What is the difference between the include and require language constructs?', NULL, NULL, 1),
  (158, 'When writing CLI scripts it is often useful to access the standard streams available to the operating system such as standard input/output and error. How does one access these streams in PHP 5?', NULL, NULL, 1),
  (159, 'How can one take advantage of the time waiting for a lock during a stream access, to do other tasks using the following locking code as the base:\r\n$retval = flock($fr, LOCK_EX);', NULL, 'http://php.net/manual/en/function.flock.php ', 1),
  (160, 'What is the output of?', 'function apple($apples = 4)\r\n{\r\n  $apples = $apples / 2;\r\n  return $apples;\r\n}\r\n$apples = 10;\r\napple($apples);\r\necho $apples;', NULL, 1),
  (161, 'Which statement will return the third parameter passed to a function?', NULL, NULL, 1),
  (162, 'What is the output of the following code?', 'function oranges(&$oranges = 17)\r\n{\r\n	$oranges .= 1;\r\n}\r\n$apples = 5;\r\noranges($apples);\r\necho $apples++;', NULL, 1),
  (163, 'What is the output of the following code?', 'function pears(Array $pears)\r\n{\r\n	if (count($pears) > 0)\r\n	{\r\n		echo array_pop($pears);\r\n		pears($pears);\r\n	}\r\n}\r\n$fruit = array("Anjo", "Bartlet");\r\npears($fruit);', 'http://php.net/manual/en/function.array-pop.php', 1),
  (164, 'In PHP5 objects are passed by reference to a function when (Select the answer that is the most correct):', NULL, NULL, 1),
  (165, 'What is the output of the following code?', '<?php\r\nfunction byReference(&$variable = 5)\r\n{\r\n  echo ++$variable;\r\n}\r\nbyReference();\r\n?>', NULL, 1),
  (166, 'What is the output of the following code?', '<?php\r\nfunction x10(&$number)\r\n  $number *= 10;\r\n\r\n$count = 5;\r\nx10($count);\r\necho $count;\r\n?>', NULL, 1),
  (167, 'What is the output of the following?', '<?php\r\nfunction 1dotEach($n)\r\n{\r\n  if ($n > 0)\r\n  {\r\n    1dotEach(--$n);\r\n    echo ".";\r\n  }else \r\n  {\r\n    return $n;\r\n  }\r\n}\r\n1dotEach(4);\r\n?>', NULL, 1),
  (168, 'When your error reporting level includes E_STRICT, what will the output of the following code be?', '<?php\r\nfunction optionalParam($x = 1, $y = 5, $z)\r\n{\r\n  if ((!$z > 0))\r\n  {\r\n    $z = 1;\r\n  }\r\n  for($count = $x; $count < $y; $count+= $z)\r\n  {\r\n    echo "#";	\r\n  }\r\n}\r\noptionalParam(2,4,2);\r\n?>', NULL, 1),
  (169, 'What is the output of the following?', '<?php\r\nfunction byRef(&$number)\r\n{\r\n  $number *= 10;\r\n  return ($number - 5);\r\n}\r\n$number = 10;\r\n$number = byRef($number);\r\necho $number;\r\n?>', NULL, 1),
  (170, 'What is the output of the following?', '<?php\r\nfunction byRef(&$apples)\r\n{\r\n  $apples++;\r\n}\r\n$oranges = 5;\r\n$apples = 5;\r\nbyRef($oranges);\r\necho "I have $apples apples and $oranges oranges";\r\n?>', NULL, 1),
  (171, 'What is the output of the following?', '<?php\r\nfunction a($number)\r\n{\r\n  return (b($number) * $number);\r\n}\r\n\r\nfunction b(&$number)\r\n{\r\n  ++$number;\r\n}\r\necho a(5);\r\n?>', NULL, 1),
  (172, 'Choose the selection that best matches the following statements:', 'PHP is a _____ scripting language based on the ____ engine. It is primarily used to\r\ndevelop dynamic _____ content, although it can be used to generate ____ documents\r\n(among others) as well.', NULL, 1),
  (173, 'Which of the following is not valid PHP code?', NULL, 'Variables and function names cannot start with a number', 1),
  (174, 'What is displayed when the following script is executed?', '<?php\r\ndefine(myvalue, "10");\r\n$myarray[10] = "Dog";\r\n$myarray[] = "Human";\r\n$myarray[\'myvalue\'] = "Cat";\r\n$myarray["Dog"] = "Cat";\r\nprint "The value is: ";\r\nprint $myarray[myvalue]."\\n";\r\n?>', NULL, 1),
  (175, 'What is the difference between print() and echo()?', NULL, NULL, 1),
  (176, 'What is the output of the following script?', '<?php\r\n$a = 10;\r\n$b = 20;\r\n$c = 4;\r\n$d = 8;\r\n$e = 1.0;\r\n$f = $c + $d * 2;\r\n$g = $f % 20;\r\n$h = $b - $a + $c + 2;\r\n$i = $h << $c;\r\n$j = $i * $e;\r\nprint $j;\r\n?>', NULL, 1),
  (177, 'Which values should be assigned to the variables $a, $b and $c in order for the following\r\nscript to display the string Hello, World!?', '<?php\r\n$string = "Hello, World!";\r\n$a = ?;\r\n$b = ?;\r\n$c = ?;\r\nif($a) {\r\n	if($b && !$c) {\r\n		echo "Goodbye Cruel World!";\r\n	} else if(!$b && !$c) {\r\n		echo "Nothing here";\r\n	}\r\n} else {\r\n	if(!$b){\r\n		if(!$a && (!$b && $c)) {\r\n			echo "Hello, World!";\r\n		} else {\r\n			echo "Goodbye World!";\r\n		}\r\n	} else {\r\n		echo "Not quite.";\r\n	}\r\n}\r\n?>', NULL, 1),
  (178, 'What will the following script output?', '<?php\r\n$array = \'0123456789ABCDEFG\';\r\n$s = \'\';\r\nfor ($i = 1; $i < 50; $i++) {\r\n$s .= $array[rand(0,strlen ($array) - 1)];\r\n}\r\necho $s;\r\n?>', NULL, 1),
  (179, 'Choose the appropriate function declaration for the user-defined function is_leap(). Assume that, if not otherwise defined, the is_leap function uses the year 2000 as a default value:', '<?php\r\n/* Function declaration here */\r\n{\r\n	$is_leap = (!($year %4) && (($year % 100) || !($year % 400)));\r\n	return $is_leap;\r\n}\r\nvar_dump(is_leap(1987)); /* Displays false */\r\nvar_dump(is_leap()); /* Displays true */\r\n?>', 'http://php.net/manual/it/context.ftp.php - http://it1.php.net/manual/it/function.fopen.php', 1),
  (180, 'What is the value displayed when the following is executed? Assume that the code was executed using the following URL: testscript.php?c=25', '<?php\r\nfunction process($c, $d = 25)\r\n{\r\n	global $e;\r\n	$retval = $c + $d - $_GET[\'c\'] - $e;\r\n	return $retval;\r\n}\r\n$e = 10;\r\necho process(5);\r\n?>', NULL, 1),
  (181, 'Consider the following script. Each ? in the above script represents an integer index against the $s array. In order to display the Hello, World! string when executed, what must the missing integer indexes be?', '<?php\r\nfunction myfunction($a, $b = true)\r\n{\r\nif($a && !$b) {\r\necho "Hello, World!\\n";\r\n}\r\n}\r\n$s = array(0 => "my",\r\n1 => "call",\r\n2 => \'$function\',\r\n3 => \' \',\r\n4 => "function",\r\n5 => \'$a\',\r\n6 => \'$b\',\r\n7 => \'a\',\r\n8 => \'b\',\r\n9 => \'\');\r\n$a = true;\r\n$b = false;\r\n/* Group A */\r\n$name = $s[?].$s[?].$s[?].$s[?].$s[?].$s[?];\r\n/* Group B */\r\n$name(${$s[?]}, ${$s[?]});\r\n?>', NULL, 1),
  (182, 'Run-time inclusion of a PHP script is performed using the ________ construct, while compile-time inclusion of PHP scripts is performed using the _______ construct', NULL, 'In recent versions of PHP, the only difference between require() (or require_once()) and\r\ninclude() (or include_once()) is in the fact that, while the former will only throw a warning\r\nand allow the script to continue its execution if the include file is not found, the latter will\r\nthrow an error and halt the script. Therefore, Answer 5 is correct.', 1),
  (183, 'Which of the following expressions multiply the value of the integer variable $a by 4?', NULL, 'The only answer that really fits the bill is A. A script doesn’t necessarily terminate when it\r\nreaches the end of any file other than the main one—so the “current” file could be externally\r\nincluded and not cause the script to terminate at its end. As far as PHP and Apache crashes,\r\nthey can hardly be considered “clean” ways to terminate a script.', 2),
  (184, 'At the end of the execution of the following script, which values will be stored in the $a->my_value array?', '<?php\r\nclass my_class\r\n{\r\n	var $my_value = array();\r\n\r\n	function my_class ($value)\r\n	{\r\n		$this->my_value[] = $value;\r\n	}\r\n\r\n	function set_value ($value)\r\n	{\r\n		$this->$my_value= $value;\r\n	}\r\n}\r\n\r\n$a = new my_class (\'a\');\r\n$a->my_value[] = \'b\';\r\n$a->set_value (\'c\');\r\n$a->my_class(\'d\');\r\n?>', NULL, 3),
  (185, 'Which object-oriented pattern would you use to implement a class that must be instantiated only once for the entire lifespan of a script?', NULL, 'The Singleton Pattern is handy whenever only one instance of a particular class can exist at\r\nany given time (and, yes, in case you’re wondering, you should expect the exam to test you\r\non the basics of patterns, too).', 1),
  (186, 'Under normal circumstances - and ignoring any browser bugs—how can a cookie be accessed from a domain other than the one it was set for?', NULL, 'Answer B is correct. Browsers simply do not allow an HTTP transaction that takes place on one domain to set cookies for another domain. Doing otherwise would present clear security implications: for example, a malicious page on one domain could overwrite your session ID for another domain and force you to use another session to which a third party has access\r\nwithout your knowledge.', 1),
  (187, 'How can the index.php script access the email form element of the following HTML form?', '<form action="index.php" method="post">\r\n	<input type="text" name="email"/>\r\n</form>', NULL, 2),
  (188, 'What will be the net effect of running the following script on the $s string?', '<?php\r\n$s = \'<p>Hello</p>\';\r\n$ss = htmlentities ($s);\r\necho $s;', 'This question tests nothing about your knowledge of HTML encoding—and everything\r\nabout your ability to properly interpret code. The $s function is left unaltered by the call to\r\nhtmlentities(), which returns the modified string so that it can be assigned to $ss. Therefore,\r\nAnswers B and D are correct. If you’re wondering whether this is an unfair “trick” question,\r\ndo keep in mind that, often, the ability to find and resolve bugs revolves around discovering\r\nlittle mistakes like this one.', 2),
  (189, 'If no expiration time is explicitly set for a cookie, what happens to it?', NULL, 'Cookies automatically expire at the end of the user’s browser session if no explicit expiration time is set. Cookies are not necessary to maintain a server-side session.', 1),
  (190, 'In an HTTPS transaction, how are URLs and query strings passed from the browser to the\r\nweb server?', NULL, 'When an HTTPS transaction takes place, the browser and the server immediately negotiate an encryption mechanism so that any subsequent data is not passed in clear text - including the URL and query string, which are otherwise passed the same way as with a traditional HTTP transaction. Answer 2 is, therefore, correct.', 1),
  (191, 'What happens when a form submitted to a PHP script contains two elements with the same\r\nname?', NULL, NULL, 1),
  (192, 'How would you store an array in a cookie?', NULL, 'Only Answer 2 is always correct. While the implode function can be used to convert an array into a string - a prerequisite of being able to store it in a cookie - it cannot guarantee that you’ll be able to reconstruct the array at a later date the way serialize() can. Storing an array\r\nin a cookie may not be a good idea because browsers only allow a limited amount of storage space for each cookie, but that’s not always the case—you should be able to store relatively small arrays without much in the way of problems.', 1),
  (193, 'What will the following script output?', '<?php\r\nob_start();\r\nfor ($i = 0; $i < 10; $i++) {\r\necho $i;\r\n}\r\n$output = ob_get_contents();\r\nob_end_clean();\r\necho $ouput;', 'Yet another question designed to see how well you recognize bugs in a script. Did you notice that, at the end of the script, the $output variable’s name is misspelled in the echo statement? The script will output a notice and, therefore, Answer 5 is correct.', 1),
  (194, 'By default, PHP stores session data in ________________.', NULL, 'The filesystem (Answer 1). By default, PHP stores all session information in the /tmp folder; users of operating systems where this folder doesn’t exist (such as Windows) must change the default value of the session.save_path php.ini setting to a directory appropriate for their \r\nsetup (e.g.: C:\\Temp).', 1),
  (195, 'When you write a cookie with an expiration date in the future to a particular machine, the cookie never seem to be set. The technique usually works with other computers, and you have checked that the time on the machine corresponds to the time on the server within a\r\nreasonable margin by verifying the date reported by the operating system on the client computer’s desktop. The browser on the client machine seems to otherwise work fine on most other websites. What could be likely causes of this problem?', NULL, 'Answers 1 and 5 both describe likely causes of this type of problem and warrant further investigation on your part. Since the browser seems to work fine, it’s unlikely that its binaries have suffered corruption such that only your site has stopped working, and virusscanning programs do not normally stop secure cookies selectively (although some block all\r\ncookies). On the other hand, the browser might have been explicitly set to refuse all cookies, which is probably the first source of trouble you should check for. By the same token, the computer’s time zone might have been set incorrectly and, since cookie expiration dates are\r\ncoordinated through GMT, cause the cookie to expire as soon as it was set and never be returned to your scripts', 2),
  (196, 'Assuming that the client browser is never restarted, how long after the last access will a session “expire” and be subject to garbage collection?', NULL, 'The <b>session.gc_maxlifetime</b> INI setting regulates the amount of time since the last access after\r\nwhich the session handler considers a session data file “garbage” and marks it for deletion\r\nby the garbage handler. Once this has happened, any subsequent access to the session will be\r\nconsidered invalid, even if the data file still exists. Coincidentally, the session.gc_maxlifetime\r\nis set to 1,440 seconds, but you can’t rely on that number as it might have been changed\r\nwithout your knowledge by the system administrator. Answer 2 is, therefore, correct.', 1),
  (197, 'Array values are keyed by ______ values (called indexed arrays) or using ______ values (called associative arrays). Of course, these key methods can be combined as well.', NULL, NULL, 1),
  (198, 'The ___________ function automatically transforms newline characters into HTML tags', NULL, 'This identifies the nl2br function, which can be used precisely for this purpose.', 1),
  (199, 'Which of the following strings are not valid modes for the fopen() function? ', NULL, NULL, 1),
  (200, 'Consider the following piece of code; After running it, the value of $result would be:', '<?php\r\n$arr = array(3 => "First", 2=> "Second", 1=> "Third");\r\nlist (, $result) = $arr;\r\n?>', NULL, 1),
  (201, 'In standard SQL-92, which of these situations do not require or cannot be handled through the use of an aggregate SQL function?', NULL, NULL, 2),
  (202, 'Multidimensional arrays can be sorted using the ______ function.', NULL, NULL, 1),
  (203, 'When using the default session handler files for using sessions, PHP stores session information on the harddrive of the webserver. When are those session files cleaned up? ', NULL, NULL, 1),
  (204, 'What is the order of parameters in the mail() function?', NULL, NULL, 1),
  (205, 'Which of the following statements are correct?', NULL, NULL, 3),
  (206, 'Which of the following functions sets up start and end element handlers?', NULL, NULL, 1),
  (207, 'Which of the following functions can be used as a countermeasure to a Shell Injection attack?', NULL, NULL, 2),
  (208, 'In which of the following situations will you use the set_exception_handler() function?', NULL, NULL, 1),
  (209, 'John works as a professional Ethical Hacker. He has been assigned a project to test the security of www.we-are-secure.com. On the We-are-secure login page, he enters =\'or\'\'=\' as a username and successfully logs in to the user page of the Web site. The We-are-secure login page is vulnerable to a __________.', NULL, NULL, 1),
  (210, 'You have given the following XML data in the tasks.XML file. What should be displayed when this script is executed?', '<?xml version="1.0" encoding="ISO-8859-1"?>\r\n<tasklist>\r\n	<note>\r\n		<tasks>Validate data</tasks>\r\n		<details>String Validation</details>\r\n	</note>\r\n	<note>\r\n		<tasks>Secure data</tasks>\r\n		<details>Encryption</details>\r\n	</note>\r\n</tasklist>\r\n\r\nNow, you run the following PHP script:\r\n\r\n<?php\r\n$objDOM = new DOMDocument();\r\n$objDOM->load("tasks.xml");\r\n$note = $objDOM->getElementsByTagName("note");\r\nforeach($note as $value)\r\n{\r\n	$tasks = $value->getElementsByTagName("tasks");\r\n	$task = $tasks->item(0)->nodeValue;\r\n	$details = $value->getElementsByTagName("details");\r\n	$detail = $details->item(0)->nodeValue;\r\n\r\n	echo "$task :: $detail <br>";\r\n}\r\n?>', NULL, 2),
  (211, 'You run the following PHP script. What is the use of the mysql_real_escape_string() function in the above script', '<?php\r\n$name = mysql_real_escape_string($_POST["name"]);\r\n$password = mysql_real_escape_string($_POST["password"]);\r\n?>', NULL, 2),
  (212, 'Which of the following functions in SimpleXML can be used to return an iterator containing a list of all subnodes of the current node?', NULL, NULL, 1),
  (213, 'Which of the following functions is the best choice to retrieve the fingerprint of a string?', NULL, NULL, 1);
/*!40000 ALTER TABLE `quiz_questions` ENABLE KEYS */;


-- Dumping structure for table quiz.quiz_questions_relations
DROP TABLE IF EXISTS `quiz_questions_relations`;
CREATE TABLE IF NOT EXISTS `quiz_questions_relations` (
  `id` bigint(20) NOT NULL AUTO_INCREMENT,
  `topic_id` bigint(20) DEFAULT NULL,
  `question_id` bigint(20) DEFAULT NULL,
  PRIMARY KEY (`id`),
  KEY `question_id` (`topic_id`),
  KEY `topic_id` (`question_id`),
  CONSTRAINT `qstopicrel_topic_id` FOREIGN KEY (`topic_id`) REFERENCES `topics` (`id`),
  CONSTRAINT `qstopicrel_topics_question_id` FOREIGN KEY (`question_id`) REFERENCES `quiz_questions` (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=215 DEFAULT CHARSET=latin1;

-- Dumping data for table quiz.quiz_questions_relations: ~202 rows (approximately)
DELETE FROM `quiz_questions_relations`;
/*!40000 ALTER TABLE `quiz_questions_relations` DISABLE KEYS */;
INSERT INTO `quiz_questions_relations` (`id`, `topic_id`, `question_id`) VALUES
  (1, 8, 1),
  (2, 8, 2),
  (3, 8, 3),
  (4, 8, 4),
  (5, 8, 5),
  (6, 8, 6),
  (7, 8, 7),
  (8, 8, 8),
  (9, 8, 9),
  (10, 8, 10),
  (11, 8, 11),
  (12, 8, 12),
  (13, 8, 13),
  (14, 8, 14),
  (15, 8, 15),
  (16, 8, 16),
  (17, 8, 17),
  (18, 8, 18),
  (19, 8, 19),
  (20, 8, 20),
  (21, 8, 21),
  (22, 8, 22),
  (23, 8, 23),
  (24, 8, 24),
  (25, 8, 25),
  (26, 8, 26),
  (27, 8, 27),
  (28, 8, 28),
  (29, 8, 29),
  (30, 8, 30),
  (31, 8, 31),
  (32, 8, 32),
  (33, 8, 33),
  (34, 8, 34),
  (35, 8, 35),
  (36, 8, 36),
  (37, 8, 37),
  (38, 8, 38),
  (39, 8, 39),
  (40, 8, 40),
  (41, 8, 41),
  (42, 8, 42),
  (43, 8, 43),
  (44, 8, 44),
  (45, 8, 45),
  (46, 8, 46),
  (47, 8, 47),
  (48, 8, 48),
  (49, 8, 49),
  (50, 8, 50),
  (51, 8, 51),
  (52, 8, 52),
  (53, 8, 53),
  (54, 8, 54),
  (55, 8, 55),
  (56, 8, 56),
  (57, 8, 57),
  (58, 8, 58),
  (59, 8, 59),
  (60, 8, 60),
  (61, 8, 61),
  (62, 8, 62),
  (63, 8, 63),
  (64, 8, 64),
  (65, 8, 65),
  (66, 8, 66),
  (67, 8, 67),
  (68, 8, 68),
  (69, 8, 69),
  (70, 8, 70),
  (71, 8, 71),
  (72, 8, 72),
  (73, 8, 73),
  (74, 8, 74),
  (75, 8, 75),
  (76, 8, 76),
  (77, 8, 77),
  (78, 8, 78),
  (79, 8, 79),
  (80, 8, 80),
  (81, 8, 81),
  (82, 8, 82),
  (83, 8, 83),
  (84, 8, 84),
  (85, 8, 85),
  (86, 8, 86),
  (87, 8, 87),
  (88, 8, 88),
  (89, 8, 89),
  (90, 8, 90),
  (91, 8, 91),
  (92, 8, 92),
  (93, 8, 93),
  (94, 8, 94),
  (95, 8, 95),
  (96, 8, 96),
  (97, 8, 97),
  (98, 8, 98),
  (99, 8, 99),
  (100, 8, 100),
  (101, 8, 101),
  (102, 8, 102),
  (103, 8, 103),
  (104, 8, 104),
  (105, 8, 105),
  (106, 8, 106),
  (107, 8, 107),
  (108, 8, 108),
  (109, 8, 109),
  (110, 8, 110),
  (111, 8, 111),
  (112, 8, 112),
  (113, 8, 113),
  (114, 8, 114),
  (115, 8, 115),
  (116, 8, 116),
  (117, 8, 117),
  (118, 8, 118),
  (119, 8, 119),
  (120, 8, 120),
  (121, 8, 121),
  (122, 8, 122),
  (123, 8, 123),
  (124, 8, 124),
  (125, 8, 125),
  (126, 8, 126),
  (127, 8, 127),
  (128, 8, 128),
  (129, 8, 129),
  (130, 8, 130),
  (131, 8, 131),
  (132, 8, 132),
  (133, 8, 133),
  (134, 8, 134),
  (135, 8, 135),
  (136, 8, 136),
  (137, 8, 137),
  (138, 8, 138),
  (139, 8, 139),
  (140, 8, 140),
  (141, 8, 141),
  (142, 8, 142),
  (143, 8, 143),
  (144, 8, 144),
  (145, 8, 145),
  (146, 8, 146),
  (147, 8, 147),
  (148, 8, 148),
  (149, 8, 149),
  (150, 8, 150),
  (151, 8, 151),
  (152, 8, 152),
  (153, 8, 153),
  (154, 8, 154),
  (155, 8, 155),
  (156, 8, 156),
  (157, 8, 157),
  (158, 8, 158),
  (159, 8, 159),
  (160, 8, 160),
  (161, 8, 161),
  (162, 8, 162),
  (163, 8, 163),
  (164, 8, 164),
  (165, 8, 165),
  (166, 8, 166),
  (167, 8, 167),
  (168, 8, 168),
  (169, 8, 169),
  (170, 8, 170),
  (171, 8, 171),
  (172, 8, 172),
  (173, 8, 173),
  (174, 8, 174),
  (175, 8, 175),
  (176, 8, 176),
  (177, 8, 177),
  (178, 8, 178),
  (179, 8, 179),
  (180, 8, 180),
  (181, 8, 181),
  (182, 8, 182),
  (183, 8, 183),
  (184, 8, 184),
  (185, 8, 185),
  (186, 8, 186),
  (187, 8, 187),
  (188, 8, 188),
  (189, 8, 189),
  (190, 8, 190),
  (191, 8, 191),
  (192, 8, 192),
  (193, 8, 193),
  (194, 8, 194),
  (195, 8, 195),
  (196, 8, 196),
  (197, 8, 197),
  (198, 3, 1),
  (199, 8, 198),
  (200, 8, 199),
  (201, 8, 200),
  (202, 8, 201),
  (203, 8, 202),
  (204, 8, 203),
  (205, 8, 204),
  (206, 8, 205),
  (207, 8, 206),
  (208, 8, 207),
  (209, 8, 208),
  (210, 8, 209),
  (211, 8, 210),
  (212, 8, 211),
  (213, 8, 212),
  (214, 8, 213);
/*!40000 ALTER TABLE `quiz_questions_relations` ENABLE KEYS */;


-- Dumping structure for table quiz.quiz_tags_relations
DROP TABLE IF EXISTS `quiz_tags_relations`;
CREATE TABLE IF NOT EXISTS `quiz_tags_relations` (
  `id` bigint(20) NOT NULL AUTO_INCREMENT,
  `question_id` bigint(20) DEFAULT NULL,
  `tag_id` bigint(20) DEFAULT NULL,
  PRIMARY KEY (`id`),
  KEY `question_id` (`question_id`),
  KEY `tag_id` (`tag_id`),
  CONSTRAINT `qstrel_tags_question_id` FOREIGN KEY (`question_id`) REFERENCES `quiz_questions` (`id`),
  CONSTRAINT `qstrel_tags_tags_id` FOREIGN KEY (`tag_id`) REFERENCES `tags` (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=289 DEFAULT CHARSET=latin1 ROW_FORMAT=COMPACT;

-- Dumping data for table quiz.quiz_tags_relations: ~270 rows (approximately)
DELETE FROM `quiz_tags_relations`;
/*!40000 ALTER TABLE `quiz_tags_relations` DISABLE KEYS */;
INSERT INTO `quiz_tags_relations` (`id`, `question_id`, `tag_id`) VALUES
  (1, 1, 1),
  (2, 1, 2),
  (3, 1, 4),
  (4, 2, 4),
  (5, 3, 3),
  (6, 3, 86),
  (7, 6, 3),
  (8, 7, 31),
  (9, 8, 89),
  (10, 9, 11),
  (11, 10, 2),
  (12, 10, 3),
  (13, 11, 2),
  (14, 12, 2),
  (15, 13, 11),
  (16, 14, 11),
  (17, 15, 11),
  (18, 16, 2),
  (19, 16, 70),
  (20, 17, 35),
  (21, 18, 35),
  (22, 18, 2),
  (23, 19, 35),
  (24, 20, 2),
  (25, 21, 11),
  (26, 21, 35),
  (27, 22, 35),
  (28, 22, 45),
  (29, 23, 35),
  (30, 24, 35),
  (31, 25, 35),
  (32, 25, 2),
  (33, 26, 35),
  (34, 27, 35),
  (35, 28, 35),
  (36, 29, 35),
  (37, 29, 45),
  (38, 30, 35),
  (39, 30, 45),
  (40, 31, 35),
  (41, 31, 45),
  (42, 32, 35),
  (43, 32, 39),
  (44, 33, 89),
  (45, 34, 50),
  (46, 35, 49),
  (47, 36, 49),
  (48, 37, 49),
  (49, 38, 49),
  (50, 39, 49),
  (51, 40, 49),
  (52, 41, 49),
  (53, 42, 51),
  (54, 43, 86),
  (55, 43, 2),
  (56, 44, 86),
  (57, 44, 89),
  (58, 45, 89),
  (59, 45, 86),
  (60, 46, 86),
  (61, 47, 86),
  (62, 48, 89),
  (63, 48, 70),
  (64, 49, 70),
  (65, 50, 86),
  (66, 50, 89),
  (67, 51, 89),
  (68, 52, 89),
  (69, 53, 89),
  (70, 54, 89),
  (71, 55, 89),
  (72, 56, 89),
  (73, 57, 89),
  (74, 58, 89),
  (75, 59, 70),
  (76, 61, 70),
  (77, 62, 70),
  (78, 63, 70),
  (79, 64, 70),
  (80, 65, 70),
  (81, 66, 70),
  (82, 67, 3),
  (83, 68, 70),
  (84, 69, 3),
  (85, 70, 3),
  (86, 70, 63),
  (87, 71, 11),
  (88, 71, 70),
  (89, 72, 70),
  (90, 73, 70),
  (91, 74, 70),
  (92, 75, 97),
  (93, 76, 97),
  (94, 77, 97),
  (95, 78, 28),
  (96, 79, 28),
  (97, 80, 28),
  (98, 80, 28),
  (99, 81, 28),
  (100, 82, 29),
  (101, 83, 29),
  (102, 84, 32),
  (103, 82, 30),
  (104, 85, 31),
  (105, 86, 31),
  (106, 87, 31),
  (107, 88, 33),
  (108, 88, 32),
  (109, 88, 34),
  (110, 89, 32),
  (111, 89, 11),
  (112, 90, 63),
  (113, 91, 31),
  (114, 90, 70),
  (115, 92, 70),
  (116, 93, 70),
  (117, 93, 49),
  (118, 92, 49),
  (119, 94, 49),
  (120, 94, 70),
  (121, 95, 49),
  (122, 95, 81),
  (123, 95, 54),
  (124, 96, 92),
  (125, 97, 49),
  (126, 98, 49),
  (127, 98, 95),
  (128, 99, 98),
  (129, 100, 98),
  (130, 101, 35),
  (131, 102, 98),
  (132, 103, 8),
  (133, 104, 86),
  (134, 104, 88),
  (135, 105, 86),
  (136, 105, 11),
  (137, 106, 11),
  (138, 107, 35),
  (139, 108, 35),
  (140, 109, 35),
  (141, 110, 11),
  (142, 111, 99),
  (143, 112, 99),
  (144, 113, 96),
  (145, 114, 96),
  (146, 115, 96),
  (147, 116, 96),
  (148, 117, 19),
  (149, 118, 85),
  (150, 119, 85),
  (151, 118, 80),
  (152, 119, 80),
  (153, 120, 80),
  (154, 121, 80),
  (155, 121, 85),
  (156, 122, 19),
  (157, 123, 19),
  (158, 124, 19),
  (159, 125, 19),
  (160, 126, 19),
  (161, 127, 19),
  (162, 127, 100),
  (163, 128, 19),
  (164, 128, 26),
  (165, 129, 26),
  (166, 129, 19),
  (167, 130, 19),
  (168, 131, 100),
  (169, 132, 20),
  (170, 131, 19),
  (171, 133, 20),
  (172, 133, 19),
  (173, 134, 19),
  (174, 135, 19),
  (175, 135, 20),
  (176, 136, 19),
  (177, 137, 88),
  (178, 137, 86),
  (179, 138, 19),
  (180, 138, 26),
  (181, 139, 85),
  (182, 139, 80),
  (183, 141, 96),
  (184, 141, 80),
  (185, 140, 85),
  (186, 141, 85),
  (187, 142, 80),
  (188, 142, 96),
  (189, 142, 85),
  (190, 144, 80),
  (191, 144, 49),
  (192, 145, 49),
  (193, 147, 68),
  (194, 148, 68),
  (195, 149, 68),
  (196, 150, 68),
  (197, 151, 67),
  (198, 154, 67),
  (199, 152, 63),
  (200, 153, 63),
  (201, 153, 63),
  (202, 155, 67),
  (203, 155, 64),
  (204, 155, 64),
  (205, 156, 68),
  (206, 157, 1),
  (207, 158, 94),
  (208, 158, 63),
  (209, 159, 63),
  (210, 160, 11),
  (211, 161, 11),
  (212, 162, 11),
  (213, 162, 3),
  (214, 161, 3),
  (215, 163, 3),
  (216, 163, 86),
  (217, 164, 1),
  (218, 165, 3),
  (219, 165, 11),
  (220, 166, 11),
  (221, 167, 3),
  (222, 167, 11),
  (223, 166, 3),
  (224, 167, 2),
  (225, 168, 11),
  (226, 169, 11),
  (227, 170, 11),
  (228, 170, 4),
  (229, 171, 11),
  (230, 171, 4),
  (231, 171, 2),
  (232, 172, 2),
  (233, 172, 4),
  (234, 173, 4),
  (235, 174, 86),
  (236, 175, 1),
  (237, 174, 4),
  (238, 176, 3),
  (239, 177, 3),
  (240, 177, 4),
  (241, 178, 11),
  (242, 178, 70),
  (243, 179, 11),
  (244, 180, 11),
  (245, 180, 4),
  (246, 181, 11),
  (247, 181, 4),
  (248, 183, 4),
  (249, 184, 86),
  (250, 184, 11),
  (251, 185, 35),
  (252, 186, 31),
  (253, 187, 29),
  (254, 186, 32),
  (255, 188, 4),
  (256, 189, 31),
  (257, 190, 32),
  (258, 191, 29),
  (259, 192, 31),
  (260, 192, 86),
  (261, 193, 4),
  (262, 193, 95),
  (263, 194, 28),
  (264, 194, 50),
  (265, 195, 31),
  (266, 196, 28),
  (267, 197, 4),
  (268, 197, 86),
  (269, 137, 35),
  (270, 199, 64),
  (271, 200, 86),
  (272, 201, 80),
  (273, 202, 86),
  (274, 203, 28),
  (275, 204, 102),
  (276, 205, 2),
  (277, 206, 19),
  (278, 207, 49),
  (279, 207, 94),
  (280, 208, 39),
  (281, 209, 49),
  (282, 209, 54),
  (283, 210, 19),
  (284, 211, 54),
  (285, 211, 49),
  (286, 212, 19),
  (287, 212, 20),
  (288, 213, 103);
/*!40000 ALTER TABLE `quiz_tags_relations` ENABLE KEYS */;


-- Dumping structure for table quiz.tags
DROP TABLE IF EXISTS `tags`;
CREATE TABLE IF NOT EXISTS `tags` (
  `id` bigint(20) NOT NULL AUTO_INCREMENT,
  `name` varchar(50) DEFAULT NULL,
  `slug` varchar(50) DEFAULT NULL,
  `parent_id` bigint(20) DEFAULT NULL,
  PRIMARY KEY (`id`),
  KEY `parent_id` (`parent_id`)
) ENGINE=InnoDB AUTO_INCREMENT=104 DEFAULT CHARSET=latin1 ROW_FORMAT=COMPACT;

-- Dumping data for table quiz.tags: ~101 rows (approximately)
DELETE FROM `tags`;
/*!40000 ALTER TABLE `tags` DISABLE KEYS */;
INSERT INTO `tags` (`id`, `name`, `slug`, `parent_id`) VALUES
  (1, 'PHP Basics', 'php-basics', 0),
  (2, 'Syntax', 'syntax', 1),
  (3, 'Operators', 'operators', 1),
  (4, 'Variables', 'variables', 1),
  (5, 'Control Structures', 'control-structures', 1),
  (6, 'Language Constructs and Functions', 'language-constructs-functions', 1),
  (7, 'Namespaces ', 'namespaces', 1),
  (8, 'Extensions', 'extensions', 1),
  (9, 'Config', 'config', 1),
  (10, 'Performance Bytecode caching', 'performance-bytecode-caching', 1),
  (11, 'Functions', 'functions', 0),
  (12, 'Arguments', 'arguments', 11),
  (13, 'Variables', 'variables', 11),
  (14, 'References', 'references', 11),
  (15, 'Returns', 'returns', 11),
  (16, 'Variable Scope', 'variable-scope', 11),
  (17, 'Closures', 'closures', 11),
  (18, 'Data Format and Types', 'data-format-types', 0),
  (19, 'XML', 'xml', 18),
  (20, 'SimpleXML', 'simplexml', 18),
  (21, 'XML Extension', 'xml-extension', 18),
  (22, 'Web Services', 'web-services', 18),
  (23, 'SOAP', 'soap', 18),
  (24, 'JSON', 'json', 18),
  (25, 'DateTime ', 'datetime', 18),
  (26, 'DOM Document', 'dom-document', 18),
  (27, 'Web Features', 'web-features', 0),
  (28, 'Sessions', 'sessions', 27),
  (29, 'Forms', 'forms', 27),
  (30, 'GET and POST data', 'get-and-post-data', 27),
  (31, 'Cookies', 'cookies', 27),
  (32, 'HTTP Headers', 'http-headers', 27),
  (33, 'HTTP Authentication', 'http-authentication', 27),
  (34, 'HTTP Status Codes ', 'http-status-codes', 27),
  (35, 'OOP', 'oop', 0),
  (36, 'Instantiation', 'instantiation', 35),
  (37, 'Modifiers/Inheritance', 'modifiers/inheritance', 35),
  (38, 'Interfaces', 'interfaces', 35),
  (39, 'Exceptions', 'exceptions', 35),
  (40, 'Autoload', 'autoload', 35),
  (41, 'Reflection', 'reflection', 35),
  (42, 'Type Hinting', 'type-hinting', 35),
  (43, 'Class Constants', 'class-constants', 35),
  (44, 'Late Static Binding', 'late-static-binding', 35),
  (45, 'Magic Methods', 'magic--methods', 35),
  (46, 'Instance Methods & Properties', 'instance-methods-properties', 35),
  (47, 'SPL', 'spl', 35),
  (48, 'Traits', 'traits', 35),
  (49, 'Security', 'security', 0),
  (50, 'Configuration', 'configuration', 49),
  (51, 'Session Security', 'session-security', 49),
  (52, 'Cross-Site Scripting', 'cross-site-scripting', 49),
  (53, 'Cross-Site Request Forgeries', 'cross-site-request-forgeries', 49),
  (54, 'SQL Injection', 'sql-injection', 49),
  (55, 'Remote Code Injection', 'remote-code-injection', 49),
  (56, 'Email Injection', 'email-injection', 49),
  (57, 'Filter Input', 'filter-input', 49),
  (58, 'Escape Output', 'escape-output', 49),
  (59, 'Encryption and Hashing algorithms', 'encryption-hashing-algorithms', 49),
  (60, 'File uploads', 'file-uploads', 49),
  (61, 'PHP Configuration', 'php-configuration', 49),
  (62, 'Password hashing API ', 'password-hashing-api', 49),
  (63, 'Input Output', 'input-output', 0),
  (64, 'Files', 'files', 63),
  (65, 'Reading', 'reading', 63),
  (66, 'Writing', 'writing', 63),
  (67, 'File System Functions', 'file-system-functions', 63),
  (68, 'Streams', 'streams', 63),
  (69, 'Contexts', 'contexts', 63),
  (70, 'Strings & Patterns', 'strings-patterns', 0),
  (71, 'Quoting', 'quoting', 70),
  (72, 'Matching', 'matching', 70),
  (73, 'Extracting', 'extracting', 70),
  (74, 'Searching', 'searching', 70),
  (75, 'Replacing', 'replacing', 70),
  (76, 'Formatting', 'formatting', 70),
  (77, 'PCRE', 'pcre', 70),
  (78, 'NOWDOC', 'nowdoc', 70),
  (79, 'Encodings', 'encodings', 70),
  (80, 'Databases', 'databases', 0),
  (81, 'SQL', 'sql', 80),
  (82, 'Joins', 'joins', 80),
  (83, 'Prepared Statements', 'prepared-statements', 80),
  (84, 'Transactions', 'transactions', 80),
  (85, 'PDO', 'pdo', 80),
  (86, 'Arrays', 'arrays', 0),
  (87, 'Associative Arrays', 'associative-arrays', 86),
  (88, 'Array Iteration', 'array-iteration', 86),
  (89, 'Array Functions', 'array-functions', 86),
  (90, 'SPL Objects as Arrays ', 'spl-objects-as-arrays', 86),
  (91, 'Casting', 'casting', 86),
  (92, 'Apache', 'apache', 0),
  (93, 'Language basics', 'language-basics', 0),
  (94, 'CLI', 'cli', 0),
  (95, 'Error handling', 'error-handling', 0),
  (96, 'MySQL', 'mysql', 0),
  (97, 'Regexp', 'regexp', 0),
  (98, 'MVC', 'mvc', 18),
  (99, 'SQLite', 'sqlite', 18),
  (100, 'SAX', 'sax', 18),
  (101, 'Design Patterns', 'design-patterns', 0),
  (102, 'Email', 'email', 0),
  (103, 'Cryptography', 'cryptography', 0);
/*!40000 ALTER TABLE `tags` ENABLE KEYS */;


-- Dumping structure for table quiz.topics
DROP TABLE IF EXISTS `topics`;
CREATE TABLE IF NOT EXISTS `topics` (
  `id` bigint(20) NOT NULL AUTO_INCREMENT,
  `name` varchar(100) DEFAULT NULL,
  `parent_id` bigint(20) DEFAULT NULL,
  `status` varchar(50) DEFAULT NULL,
  `position` bigint(20) DEFAULT NULL,
  `slug` varchar(100) DEFAULT NULL,
  PRIMARY KEY (`id`),
  KEY `name` (`name`)
) ENGINE=InnoDB AUTO_INCREMENT=15 DEFAULT CHARSET=latin1;

-- Dumping data for table quiz.topics: ~14 rows (approximately)
DELETE FROM `topics`;
/*!40000 ALTER TABLE `topics` DISABLE KEYS */;
INSERT INTO `topics` (`id`, `name`, `parent_id`, `status`, `position`, `slug`) VALUES
  (1, 'Development', 0, NULL, 1, 'development'),
  (2, 'OOP', 10, NULL, 2, 'oop'),
  (3, 'Java', 1, NULL, 3, 'java'),
  (4, 'Scrum', 12, NULL, 4, 'scrum'),
  (5, 'Ruby', 1, NULL, 5, 'ruby'),
  (6, 'Database', 0, NULL, 2, 'database'),
  (7, 'MySQL', 6, NULL, 7, 'mysql'),
  (8, 'PHP', 1, NULL, 8, 'php'),
  (9, 'MongoDB', 6, NULL, 9, 'mongodb'),
  (10, 'Concepts', 0, NULL, 3, 'concepts'),
  (11, 'Design Patterns', 10, NULL, 3, 'design-patterns'),
  (12, 'Methodologies', 0, NULL, 3, 'methodologies'),
  (13, 'Network protocols', 0, NULL, 3, 'network-protocols'),
  (14, 'HTTP', 13, NULL, 3, 'http');
/*!40000 ALTER TABLE `topics` ENABLE KEYS */;


-- Dumping structure for table quiz.users
DROP TABLE IF EXISTS `users`;
CREATE TABLE IF NOT EXISTS `users` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `name` varchar(50) COLLATE utf8_unicode_ci NOT NULL,
  `surname` varchar(50) COLLATE utf8_unicode_ci NOT NULL,
  `email` varchar(50) COLLATE utf8_unicode_ci NOT NULL,
  `username` varchar(50) COLLATE utf8_unicode_ci NOT NULL,
  `password` varchar(80) COLLATE utf8_unicode_ci NOT NULL,
  PRIMARY KEY (`id`),
  KEY `username` (`username`)
) ENGINE=InnoDB AUTO_INCREMENT=2 DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;

-- Dumping data for table quiz.users: ~0 rows (approximately)
DELETE FROM `users`;
/*!40000 ALTER TABLE `users` DISABLE KEYS */;
INSERT INTO `users` (`id`, `name`, `surname`, `email`, `username`, `password`) VALUES
  (1, '', '', '', 'admin', '74913f5cd5f61ec0bcfdb775414c2fb3d161b620');
/*!40000 ALTER TABLE `users` ENABLE KEYS */;
/*!40101 SET SQL_MODE=IFNULL(@OLD_SQL_MODE, '') */;
/*!40014 SET FOREIGN_KEY_CHECKS=IF(@OLD_FOREIGN_KEY_CHECKS IS NULL, 1, @OLD_FOREIGN_KEY_CHECKS) */;
/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;